// Importation des d√©pendances
const fs = require('fs')
const qrcode = require('qrcode-terminal')
const { Client, LegacySessionAuth, MessageMedia } = require('whatsapp-web.js')

// Importation des donn√©es
const articles = require('./data/boutique/articles.json')
const dataPerso = require('./data/fiches/dataPerso.json')
const comptes = require('./data/banque/comptes.json')
const dataTeamClassement = require('./data/classement/dataTeamClassement.json')
const dataPersoClassement = require('./data/classement/dataPersoClassement.json')

// Importation des bdd prime
const persoPrime = require('./neon/fiches/persoPrime.json')

// D√©claration des variables de session 120363023938067293@g.us
const SESSION_FILE_PATH = './privateFiles/session.json'
let bot
let session_data

let restreints = {
    groupeP: [],
    neonPrime: [],
    bdd: [],
    boutique: [],
    all: []
}
let boutiquiers = [33615641467, 234844347013, 22961809807]
let banquiers = [33615641467, 22577766701]

/*
    * FONCTION D'OUVERTURE DES FONCTIONNALITES *
    * Pr√©sence de la variable de session
*/
const withSession = () => {
    // R√©cup√©ration de la variable de session
    session_data = require(SESSION_FILE_PATH);

    // Initialisation de l'objet Client : BOT
    bot = new Client({
        authStrategy: new LegacySessionAuth({
            session: session_data
        })
    })

    // D√©marrage de l'utilisation du bot
    bot.on('ready', () => {
        // Notification de mise en place du bot
        console.log('---Le Bot est pr√™t !')

        // Gestion de la communaut√© dans le groupe principal
        botSNG('33615641467-1575229409@g.us')

        // Gestion du classement shinobi √† SNG
        botShinobi('33615641467-1575229409@g.us')

        // Gestion des transactions de la banque/boutique ninja
        botSNG_Boutique('237698731569-1589034114@g.us')

        // Gestion de la base de donn√©es
        botSNG('33615641467-1622481565@g.us')
        botDB('33615641467-1622481565@g.us')

        // Gestion des bannissements
        bannissement('33615641467-1575229409@g.us')
        bannissement('237698731569-1589034114@g.us')
        bannissement('33615641467-1622481565@g.us')
        bannissement('120363039858602742@g.us')


        // Other groups
        // botSNG('237696813190-1632689408@g.us')
        botShinobi('237696813190-1632689408@g.us')

        // Neon test
        botShinobi('120363023938067293@g.us')
        botPrime('120363023938067293@g.us')
        botPrime('120363020752825535@g.us')
        bannissement('120363023938067293@g.us')

        // sendMessage('22997609224@c.us', 'Test de\n\n messages\n sur plusieurs lignes')

        // Test de r√©cup√©ration de tous les messages
        // listenAllChat()
    })

    // Gestion d'erreur d'authentification
    bot.on('auth_failure', () => {
        console.log('Une erreur d\'authentification a √©t√© d√©tect√©e !!')
    })

    // Initialisation du bot
    bot.initialize()
}

/*
    * FONCTION D'OUVERTURE DES FONCTIONNALITES *
    * Cr√©ation de la variable de session en son absence
*/
const withOutSession = () => {
    // Notification d'absence de variable de session
    console.log('Absence de variable de session')

    // Initialisation de l'objet Client : BOT
    bot = new Client()

    // Ecoute de l'√©v√®nement QR Code
    bot.on('qr', qr => {
        // G√©n√©ration du QR Code
        qrcode.generate(qr, {small: true});
    })

    // Cr√©ation de la variable de session par authentification
    bot.on('authenticated', (session) => {
        // Enregistrement de la variable de session
        session_data = session;
        // Cr√©ation du fichier json dans lequel le stocker d√©finitivement
        fs.writeFile(SESSION_FILE_PATH, JSON.stringify(session), (err) => {
            if (err) {
                console.error(err);
            }
        });
    })

    // Initialisation du bot
    bot.initialize()
}

/*
    * FONCTION D'ECOUTE DE TOUS LES NOUVEAUX MESSAGES *
    * R√©cup√©ration de l'id de l'exp√©diteur et de son message
*/
const listenAllChat = () => {
    bot.on('message_create', (msg) => {
        // R√©cup√©ration des composants du message
        const { from, to, body } = msg

        // Affichage des composants du message
        console.log(from + ' ' + to + ' ' + body)
    })
}

/*
    * FONCTION D'ECOUTE DE TOUS LES NOUVEAUX MESSAGES *
    * R√©cup√©ration de l'id de l'exp√©diteur et de son message
*/
const sendMessage = (to, msg) => {
    bot.sendMessage(to, msg)
}

// Liste des articles
const listeArticles = () => {
    // Coffre des articles
    let lesArticles = '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n '
    lesArticles +=    '  ùêÄùêëùêìùêàùêÇùêãùêÑùêí ùêÉùêÑ ùêãùêÄ ùêÅùêéùêîùêìùêàùêêùêîùêÑ ùêçùêàùêçùêâùêÄ\n'
    lesArticles +=    '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n'

    // Boucle de parcours des articles
    articles.forEach(article => {
        // Incr√©mentation de l'article
        lesArticles += `üìå *A${article.id}*. ${article.name}\n ‚û§ Prix : \`\`\`${article.prix}\`\`\` M$`

        // Impl√©mentation de la quantit√© de stock disponible
        if (article.illimite)
        {
            // Quantit√© disponible illimit√©e
            lesArticles += `  ‚û§ Disponible\n\n`
        } else
        {
            // V√©rification de la disponiblit√©
            if (article.statut)
            {
                // Quantit√© disponible limit√©e
                lesArticles += `  ‚û§ ${article.quantite} disponible(s)\n\n`
            } else
            {
                // Quantit√© indisponible
                lesArticles += `  ‚û§ Indisponible\n\n`
            }
        }
    })

    // R√©cup√©ration de la liste des articles
    return lesArticles
}

/*
    * FONCTION D'ECOUTE DE TOUS LES NOUVEAUX MESSAGES *
    * R√©cup√©ration de l'id de l'exp√©diteur et de son message
*/
const sendMessageTest = (ganko) => {
    // Envoi du premier message
    sendMessage(ganko, 'Yo! J\'suis *Riky Bot* !')
    // Demande de question
    sendMessage(ganko, 'Para√Æt-il que tu fais du RP √† SNG. Quel est ton perso ?')

    bot.on('message', (msg) => {
        const { from, to, body } = msg

        if (from == ganko && to == '33615641467@c.us')
        {
            // Affichage du message dans la console
            console.log(body)

            // Conditionnement des r√©ponses
            switch (body.toLowerCase()) {
                case 'ganko':
                    sendMessage(ganko, 'Woah! Il doit √™tre puissant, je suppose. Quelle est son affinit√© ?')
                    break;
                case 'jiton':
                    sendMessage(ganko, 'Hum... Une ma√Ætrise du *sable*, pas vrai ?')
                    break;
                case 'oui':
                    sendMessage(ganko, 'Je le savais! Dis moi, tu aimerais participer √† mon d√©veloppement ? √ßa m\'aiderait √† √™tre plus humain, tu sais ?')
                    break;
                case 'je le veux':
                    sendMessage(ganko, 'Merci beaucoup! Je suis si content...')
                    break;
                case 'non merci':
                    sendMessage(ganko, 'Oh zut! Ce n\'est pas grave. Merci quand-m√™me.')
                    break;
                default:
                    sendMessage(ganko, 'D√©sol√© mais je ne comprends pas. Essaie avec une r√©ponse avec un seul mot stp.')
                    break;
            }
        }
    })
}

const sendMessageTestNeon = (neon) => {
    bot.on('message_create', (msg) => {
        const { from, to, body } = msg

        console.log(body)

        if ((from == neon && to == '33615641467@c.us') || (from == '33615641467@c.us' && to == neon))
        {
            // Conditionnement des r√©ponses
            switch (body)
            {
                case '! Tagar':
                    // R√©cup√©ration de l'image de l'avatar
                    const sourceImg = './assets/images/avatars/tagar_1.jpeg'
                    sendImageAvatar(sourceImg, msg)
                    break;
                case '> tagar':
                    // R√©cup√©ration de l'image de l'avatar
                    const sourceImg2 = './assets/images/avatars/tagar_2.jpeg'
                    sendImageAvatar(sourceImg2, msg)
                    break
            }
        }
    })
}

const fuin = async(msg) => {
    // R√©cup√©ration du membre √† bannir
    const membreBan = await msg.getMentions()

    // Variable de v√©rification
    let trouve = false
    
    if (restreints.all.length != 0)
    {
        // V√©rification de la liste des bannis
        restreints.all.forEach(membre => {
            if (membre == membreBan[0].number)
            {
                trouve = true
            }
        })

        // V√©rification et traitement
        if (!trouve)
        {
            // Bannissement
            restreints.all.push(membreBan[0].number)
            // Notification de bannissement
            msg.reply('```Membre scell√© avec succ√®s !```')
        } else
        {
            // Notification
            msg.reply('```Le membre a d√©j√† √©t√© banni !```')
        }
    } else 
    {
        // Bannissement
        restreints.all.push(membreBan[0].number)
        // Notification de bannissement
        msg.reply('```Membre scell√© avec succ√®s !```')
    }
}

const kai = async(msg) => {
    // R√©cup√©ration du membre √† bannir
    const membreBan = await msg.getMentions()

    // Variable de v√©rification
    let kai = false
    
    if (restreints.all.length != 0)
    {
        // V√©rification de la liste des bannis
        for (let index = 0; index < restreints.all.length; index++)
        {
            if (restreints.all[index] == membreBan[0].number)
            {
                // D√©scellement
                restreints.all.splice(index, 1)
                kai = true
            }
        }

        // V√©rification et traitement
        if (kai)
        {
            // Notification de bannissement
            msg.reply('```Rupture du sceau !```')
        } else
        {
            // Notification
            msg.reply('```Le membre n\'a d√©j√† √©t√© scell√© !```')
        }
    }
}

/*
    * FONCTION DE GESTION DES BANISSEMENTS' *
    * Ajout des bannis et supression de la liiste des bannis
*/
const bannissement = (groupe) => {
    bot.on('message_create', (msg) => {
        // R√©cup√©ration des composants du message
        const { from, to, body } = msg

        // Tri des requ√™tes au bot (from == boutiqueNina) 
        if ((from == '33615641467@c.us') && (to == groupe))
        {
            // R√©cup√©ration des infos de traitement
            const indice = body.substr(0, 1)
        
            // V√©rification de la pr√©sence de requ√™te
            if (indice == '*')
            {
                // D√©tection de la requ√™te
                if (body.substr(1, 5) == 'fuin*')
                {
                    // Requ√™te de scellement
                    fuin(msg)
                } else if (body.substr(1, 4) == 'kai*')
                {
                    // Requ√™te de d√©scellement
                    kai(msg)
                }
            }
        }
    })
}

const recup = async(msg) => {
    const author = await msg.getContact()
    console.log(author.number)
}

/*
    * MENU D'OPTION DE LA BOUTIQUE NINJA *
    * Partie initiale
*/
const botSNG_Boutique = (boutiqueNina) => {
    bot.on('message_create', (msg) => {
        // R√©cup√©ration des composants du message
        const { from, to, body } = msg

        // Tri des requ√™tes au bot
        if ((from == boutiqueNina) || ((from == '33615641467@c.us') && (to == boutiqueNina)))
        {
            // R√©cup√©ration des infos de traitement
            const indice = body.substr(0, 1)
        
            // V√©rification de la pr√©sence de requ√™te
            if (indice == '>')
            {
                // Variable de v√©rification du statut de banissement du membre
                let banni = null

                // Requ√™te de v√©rification
                autorisation(msg, 'groupeP').then(val => {
                    // R√©cup√©ration de la r√©ponse d'authentification
                    banni = val.valueOf()

                    // V√©rification et disposition des r√®gles
                    if (!banni)
                    {
                        // Message du menu de la BOUTIQUE NINJA
                        let message = `*Bienvenu(e) √† la BOUTIQUE NINJA !*\n\nü•∑üèΩ _Que d√©sirez-vous, cher(e) client(e) ?_\n\n`
                        message += `‚≠ïÔ∏è *>Liste* : voir la liste des articles\n`
                        message += `‚≠ïÔ∏è *>Compte* : voir mon solde bancaire\n\n`
                        message += `‚≠ïÔ∏è *>Commande* : effectuer des achats multiples\n`
                        message += `\`\`\`A<id> : 00\`\`\`\n`
                        message += `\`\`\`A<id> : 00\`\`\`\n`
                        message += `\`\`\`Nom du Perso\`\`\`\n\n`
                        message += `‚≠ïÔ∏è *>Achat A<id>* : effectuer un achat unique\n`
                        message += `\`\`\`00\`\`\`\n`
                        message += `\`\`\`Nom du Perso\`\`\`\n\n`
                        message += '*N.B* : Tapez la commande correspondant √† votre op√©ration.\n*>* En cas d\'une commande ou d\'un achat, sauter une ligne apr√®s une requ√™te sauf entre les articles d\'une commande.'
                        
                        // body.substr(1, 5).toLowerCase() == 'achat'
                        if (body.substr(1, 5).toLowerCase() == 'achat')
                        {
                            // R√©cup√©ration des lignes de l'achat
                            let transaction = body.split('\n')

                            //  R√©cup√©ration de la quantit√©
                            const quantite = parseInt(transaction[2])
                            if ((quantite != null) && (quantite != ''))
                            {
                                console.log(quantite)
                                transactionAchat(quantite, msg, transaction)
                            }
                        } else if (body.substr(1, 8).toLowerCase() == 'commande')
                        {
                            // R√©cup√©ration des lignes de l'achat
                            let transaction = body.split('\n')
                            // Pr√©paration de la commande
                            transactionCommande(msg, transaction)
                        } else if (body.substr(1, 11).toLowerCase() == 'transaction')
                        {
                            // V√©rification de l'autorisation
                            boutiquier(msg).then(val => {
                                const autorisation = val.valueOf()

                                if (autorisation)
                                {
                                    let client
                                    let trouve = false
                                    const requeteVirement = body.split('\n')
                                    console.log('Membre √† actualiser : ' + requeteVirement[2])
                                    comptes.forEach(compte => {
                                        if (compte.avatar == requeteVirement[2])
                                        {
                                            compte.solde += parseInt(requeteVirement[0].substr(13))
                                            trouve = true
                                            client = compte.avatar
                                        }
                                    })

                                    if (trouve)
                                    {
                                        // Notification d'actualisation
                                        msg.reply('ü•∑üèΩ Compte de *' + client + '* actualis√© !')
                                        // Mise √† jour du compte
                                        mAjComptePerso()
                                    } else
                                    {
                                        // Notification d'absence du compte
                                        msg.reply('ü•∑üèΩ Compte non disponible !')
                                    }
                                } else
                                {
                                    msg.reply('ü•∑üèΩ *Mouf !*')
                                }
                            })
                        } else if (body.substr(1, 8).toLowerCase() == 'virement')
                        {
                            // V√©rification de l'autorisation
                            banquier(msg).then(val => {
                                const autorisation = val.valueOf()

                                if (autorisation)
                                {
                                    let client
                                    let trouve = false
                                    const requeteVirement = body.split('\n')
                                    console.log('Membre √† actualiser : ' + requeteVirement[2])
                                    comptes.forEach(compte => {
                                        if (compte.avatar == requeteVirement[2])
                                        {
                                            compte.solde += parseInt(requeteVirement[0].substr(10))
                                            trouve = true
                                            client = compte.avatar
                                        }
                                    })

                                    if (trouve)
                                    {
                                        // Notification de virement
                                        msg.reply('ü•∑üèΩ Virement effectu√© pour *' + client + '* !')
                                        // Mise √† jour du compte
                                        mAjComptePerso()
                                    } else
                                    {
                                        // Notification d'absence du compte
                                        msg.reply('ü•∑üèΩ Virement impossible ! Compte non trouv√©.')
                                    }
                                } else
                                {
                                    msg.reply('ü•∑üèΩ *Mouf !*')
                                }
                            })
                        } else if (body.substr(0, 16) == '>>> *NEW COMPTE*')
                        {
                            if ((from == '33615641467@c.us') && (to == boutiqueNina))
                            {
                                // Cr√©ation de la fiche perso
                                newCompteSNG(msg)
                            } else
                            {
                                msg.reply('ü•∑üèΩ *Genjutsu - kai !*')
                            }
                        } else if ((from == '33615641467@c.us') && (to == boutiqueNina) && (body.substr(1, 7).toLowerCase() == 'accueil')) 
                        {
                            // R√©cup√©ration du num√©ro √† ajouter
                            const num = msg.body.split(' ')
                            const newMembre = parseInt(num[1])

                            if (newMembre > 0)
                            {
                                // Ajout du nouveau membre
                                addMembre(newMembre, msg)
                            } else
                            {
                                // Log d'ajout impossible
                                console.log('Num√©ro invalide')
                            }
                        } else if ((from == '33615641467@c.us') && (to == boutiqueNina) && (body.substr(1, 9).toLowerCase() == 'desertion')) 
                        {
                            // R√©cup√©ration du num√©ro √† ajouter
                            const num = msg.body.split('@')
                            const newMembre = parseInt(num[1])
                            if (newMembre > 0)
                            {
                                // Supression d'un membre
                                supMembre(newMembre, msg)
                            } else
                            {
                                // Log de suppression impossible
                                console.log('Num√©ro invalide')
                            }
                        } else
                        {
                            // R√©cup√©ration de la requ√™te
                            const requete = body.substr(1).toLowerCase()
                            // V√©rification
                            switch (requete)
                            {
                                case 'menu':
                                    // Affichage des commandes
                                    sendMessage(boutiqueNina, message)
                                    break
                                
                                case 'liste':
                                    // Affichage de la liste des articles
                                    sendMessage(boutiqueNina, listeArticles())
                                    break

                                case 'compte':
                                    // Requ√™te d'affichage du compte
                                    selectCompte(msg, boutiqueNina)
                                    // Affichage de la valeur du compte
                                    // msg.reply('ü•∑üèΩ Vous √™tes actuellement *fauch√©* !')
                                    break

                                case 'bourses ninja':
                                    // R√©cup√©ration de la fiche des comptes
                                    afficherComptes(msg)
                                    break
                            
                                default:
                                    // Notification de gestion d'erreur
                                    msg.reply('‚õîÔ∏è Veuillez v√©rifier la requ√™te et r√©essayer...')
                                    break
                            }
                        }
                    }
                })
            }
        }
    })
}

/*
    * TRANSACTION D'ACHAT UNIQUE EN BOUTIQUE *
    * D√©tection du compte du perso
*/
const transactionAchat = (quantite, msg, transaction) => {
    let client = false
    // V√©rification
    if (quantite > 0)
    {
        comptes.forEach(compte => {
            if (compte.avatar == transaction[4])
            {
                // Traitement de la requ√™te d'achat
                const id_article = parseInt(transaction[0].substr(8))

                // Variable de d√©tection
                let trouveArticle = false
                
                // Parcours des articles
                articles.forEach(article => {
                    if ((article.id == id_article) && article.statut)
                    {
                        // Article trouv√©
                        trouveArticle = true

                        // R√©cup√©ration des identifiants du membre concern√©
                        console.log('DEBUT de la transaction !')

                        // Mise √† jour dans la fiche perso
                        let trouve = false
                        dataPerso.forEach(perso => {
                            // V√©rification de la correspondance au client
                            if (perso.id == compte.id)
                            {
                                if (compte.solde >= (article.prix * quantite))
                                {
                                    // Transaction quand le compte est favorable √† la transaction
                                    if (article.illimite)
                                    {
                                        // Variable de v√©rification de l'√©quipement
                                        let equipementTrouve = false
                                        // V√©rification de la pr√©sence de l'article
                                        perso.equipements.forEach(equipement => {
                                            if (equipement.libelle == article.name)
                                            {
                                                // Modification de la quantit√© de l'article
                                                equipement.quantite += quantite
                                                // Log de transaction
                                                console.log('Mise √† jour de la fiche perso de '+ perso.name)
                                                // Mise √† jour du compte
                                                compte.solde -= article.prix * quantite
                                                // Validation de la transation
                                                validiteTransactionAchat('valide', compte, article, quantite, msg)
                                                // Mention
                                                equipementTrouve = true
                                            }
                                        })

                                        // Traitement si l'article n'√©tait pas encore pr√©sent
                                        if (!equipementTrouve)
                                        {
                                            // Ajout de l'article dans la liste des √©quipements
                                            perso.equipements.push({
                                                libelle: article.name,
                                                quantite: quantite,
                                                principal: false,
                                                rouleau: false,
                                                sousEquiements: []
                                            })
                                            // Log de transaction
                                            console.log('Mise √† jour de la fiche perso de '+ perso.name)
                                            // Mise √† jour du compte
                                            compte.solde -= article.prix * quantite
                                            // Validation de la transation
                                            validiteTransactionAchat('valide', compte, article, quantite, msg)
                                        }

                                        // Mise √† jour de la fiche et du compte
                                        mAjFichePerso()
                                        mAjComptePerso()
                                    } else
                                    {
                                        // V√©rification de la quantit√© abordable
                                        if (quantite <= article.quantite)
                                        {
                                            // Transaction enregistr√©e
                                            article.quantite -= quantite

                                            // Variable de v√©rification de l'√©quipement
                                            let equipementTrouve = false
                                            // V√©rification de la pr√©sence de l'article
                                            perso.equipements.forEach(equipement => {
                                                if (equipement.libelle == article.name)
                                                {
                                                    // Modification de la quantit√© de l'article
                                                    equipement.quantite += quantite
                                                    // Log de transaction
                                                    console.log('Mise √† jour de la fiche perso de '+ perso.name)
                                                    // Mise √† jour du compte
                                                    compte.solde -= article.prix * quantite
                                                    // Validation de la transation
                                                    validiteTransactionAchat('valide', compte, article, quantite, msg)
                                                    // Mention
                                                    equipementTrouve = true
                                                }
                                            })

                                            // Traitement si l'article n'√©tait pas encore pr√©sent
                                            if (!equipementTrouve)
                                            {
                                                // Ajout de l'article dans la liste des √©quipements
                                                perso.equipements.push({
                                                    libelle: article.name,
                                                    quantite: quantite,
                                                    principal: false,
                                                    rouleau: false,
                                                    sousEquiements: []
                                                })
                                                // Log de transaction
                                                console.log('Mise √† jour de la fiche perso de '+ perso.name)
                                                // Mise √† jour du compte
                                                compte.solde -= article.prix * quantite
                                                // Validation de la transation
                                                validiteTransactionAchat('valide', compte, article, quantite, msg)
                                            }

                                            // Modification en cas d'achat d'un article unique
                                            if (article.quantite == 0)
                                            {
                                                // Changement du statut en achet√©
                                                article.statut = false
                                            }

                                            // Mise √† jour de la fiche et du compte
                                            mAjFichePerso()
                                            mAjComptePerso()
                                        } else
                                        {
                                            // Notification de transation impossible car quantit√© √©lev√©e
                                            validiteTransactionAchat('quantite', compte, article, quantite, msg)
                                        }
                                    }
                                } else
                                {
                                    // NOtification en cas de compte insuffisant
                                    validiteTransactionAchat('solde', compte, article, quantite, msg)
                                }

                                // Mention de la correspondance
                                trouve = true
                            }
                        })

                        // V√©rification de l'absence de la fiche du client
                        if (!trouve)
                        {
                            // Notification
                            msg.reply('ü•∑üèΩ Navr√©, mais votre fiche n\'est pas pr√©sente dans la base de donn√©es.')
                        }
                    }
                })

                // V√©rification en cas d'absence de l'article
                if (!trouveArticle)
                {
                    // Transaction impossible
                    msg.reply('‚ô®Ô∏è *TRANSACTION IMPOSSIBLE* ‚ô®Ô∏è\n\nü•∑üèΩ L\'article que vous d√©sirez n\'existe pas !')
                }
                
                // Mention de pr√©sence du compte client
                client = true
            }
        })

        // V√©rification de l'absence du compte du client
        if (!client)
        {
            // Notification en cas d'absence du compte dans la boutique ninja
            msg.reply('ü•∑üèΩ Votre compte n\'existe pas en Boutique.')
        }
    }else
    {
        // Notification en cas d'absence de la quantit√© d'article
        msg.reply('ü•∑üèΩ Quantit√© indisponible. Veuillez v√©rifier votre requ√™te...')
    }
}

const validiteTransactionAchat = (statut, client, article, quantiteArticle, requete) => {
    switch (statut)
    {
        case 'solde':
            // Transaction invalide
            let transationImpossibleS = '‚ô®Ô∏è *TRANSACTION IMPOSSIBLE* ‚ô®Ô∏è\n\n'
            transationImpossibleS += `_${client.grade}_ *${client.avatar}*, vous avez pass√© une commande unique d√©taill√©e ci-dessous :\n\n`
            transationImpossibleS += '‚ñ´Ô∏èNom de l\'article : _' + article.name + '_\n'
            transationImpossibleS += '‚ñ´Ô∏èPrix unitaire : _' + article.prix + ' M$_\n'
            transationImpossibleS += '‚ñ´Ô∏èQuantit√© : _' + quantiteArticle + '_\n\n'
            transationImpossibleS += 'Votre solde est insuffisant pour r√©aliser cette transaction de *' + article.prix * quantiteArticle + ' M$*.\n\n'
            transationImpossibleS += '\`\`\`Bourse Ninja :\`\`\` *' + client.solde + ' M$*\n\n'
            transationImpossibleS += 'ü•∑üèΩ Merci et √† bient√¥t !'

            // Envoie de la fin de transaction
            requete.reply(transationImpossibleS)
            break

        case 'quantite':
            // Transaction invalide
            let transationImpossibleQ = '‚ô®Ô∏è *TRANSACTION IMPOSSIBLE* ‚ô®Ô∏è\n\n'
            transationImpossibleQ += `_${client.grade}_ *${client.avatar}*, vous avez pass√© une commande unique d√©taill√©e ci-dessous :\n\n`
            transationImpossibleQ += '‚ñ´Ô∏èNom de l\'article : _' + article.name + '_\n'
            transationImpossibleQ += '‚ñ´Ô∏èPrix unitaire : _' + article.prix + ' M$_\n'
            transationImpossibleQ += '‚ñ´Ô∏èQuantit√© : _' + quantiteArticle + '_\n\n'
            transationImpossibleQ += 'La quantit√© demand√©e est au dessus des r√©serves de la boutique : *' + article.quantite + '*.\n\n'
            transationImpossibleQ += 'ü•∑üèΩ Merci et √† bient√¥t !'

            // Envoie de la fin de transaction
            requete.reply(transationImpossibleQ)
            break
    
        default:
            // Transation valide
            let transationReussie = '‚ô®Ô∏è *TRANSACTION EFFECTUEE* ‚ô®Ô∏è\n\n'
            transationReussie += `_${client.grade}_ *${client.avatar}*, vous avez pass√© une commande unique d√©taill√©e ci-dessous :\n\n`
            transationReussie += '‚ñ´Ô∏èNom de l\'article : _' + article.name + '_\n'
            transationReussie += '‚ñ´Ô∏èPrix unitaire : _' + article.prix + ' M$_\n'
            transationReussie += '‚ñ´Ô∏èQuantit√© : _' + quantiteArticle + '_\n\n'
            transationReussie += 'Cette transaction est valid√©e pour un montant total de *' + article.prix * quantiteArticle + ' M$*.\n\n'
            transationReussie += '\`\`\`Bourse Ninja :\`\`\` *' + client.solde + ' M$*\n\n'
            transationReussie += 'ü•∑üèΩ Merci et √† bient√¥t !'

            // Envoie de la fin de transaction
            requete.reply(transationReussie)
            break
    }
}

/*
    * TRANSACTION D'ACHAT MULTIPLE EN BOUTIQUE *
    * D√©tection du compte du perso
*/
const transactionCommande = (msg, transaction) => {
    // Variables de transaction
    let client = false
    let commande = []
    let commandeValide = []

    // D√©tection des commandes
    let i = 2
    while ((transaction[i] != '') && (transaction[i].substr(0, 1) == 'A'))
    {
        // R√©cup√©ration de l'article et de sa quantit√©
        const detailAchat = transaction[i].split(' : ')
        const id_article = parseInt(detailAchat[0].substr(1))
        const quantite = parseInt(detailAchat[1].substr(0))

        // V√©rification de l'int√©grit√© de l'article
        if ((id_article != 0) && (quantite > 0))
        {
            // Ajout √† la liste des commandes
            commande.push({
                article_id: id_article,
                article_quantite: quantite
            })
        }
        // Indentation
        i++
    }

    // V√©rification
    comptes.forEach(compte => {
        if (compte.avatar == transaction[(transaction.length - 1)])
        {
            commande.forEach(achat => {
                // Parcours des articles
                articles.forEach(article => {
                    if ((article.id == achat.article_id) && article.statut)
                    {
                        // R√©cup√©ration des identifiants du membre concern√©
                        console.log('DEBUT de la transaction !')

                        // Mise √† jour dans la fiche perso
                        let trouve = false
                        dataPerso.forEach(perso => {
                            // V√©rification de la correspondance au client
                            if (perso.id == compte.id)
                            {
                                // Valeur de l'achat
                                const valeurAchat = article.prix * achat.article_quantite
                                if (compte.solde >= valeurAchat)
                                {
                                    // Transaction quand le compte est favorable √† la transaction
                                    if (article.illimite)
                                    {
                                        // Variable de v√©rification de l'√©quipement
                                        let equipementTrouve = false
                                        // V√©rification de la pr√©sence de l'article
                                        perso.equipements.forEach(equipement => {
                                            if (equipement.libelle == article.name)
                                            {
                                                // Modification de la quantit√© de l'article
                                                equipement.quantite += achat.article_quantite
                                                // Log de transaction
                                                console.log('Mise √† jour de la fiche perso de '+ perso.name)
                                                // Mise √† jour du compte
                                                compte.solde -= article.prix * achat.article_quantite
                                                // Mention
                                                equipementTrouve = true
                                                // Ajout √† la liste des articles valid√©s
                                                commandeValide.push({
                                                    nameArticle: article.name,
                                                    quantiteArticle: achat.article_quantite,
                                                    valeur: valeurAchat
                                                })
                                            }
                                        })

                                        // Traitement si l'article n'√©tait pas encore pr√©sent
                                        if (!equipementTrouve)
                                        {
                                            // Ajout de l'article dans la liste des √©quipements
                                            perso.equipements.push({
                                                libelle: article.name,
                                                quantite: achat.article_quantite,
                                                principal: false,
                                                rouleau: false,
                                                sousEquiements: []
                                            })
                                            // Log de transaction
                                            console.log('Mise √† jour de la fiche perso de '+ perso.name)
                                            // Mise √† jour du compte
                                            compte.solde -= article.prix * achat.article_quantite
                                            // Ajout √† la liste des articles valid√©s
                                            commandeValide.push({
                                                nameArticle: article.name,
                                                quantiteArticle: achat.article_quantite,
                                                valeur: valeurAchat
                                            })
                                        }
                                    } else
                                    {
                                        // V√©rification de la quantit√© abordable
                                        if (achat.article_quantite <= article.quantite)
                                        {
                                            // Transaction enregistr√©e
                                            article.quantite -= achat.article_quantite

                                            // Variable de v√©rification de l'√©quipement
                                            let equipementTrouve = false
                                            // V√©rification de la pr√©sence de l'article
                                            perso.equipements.forEach(equipement => {
                                                if (equipement.libelle == article.name)
                                                {
                                                    // Modification de la quantit√© de l'article
                                                    equipement.quantite += achat.article_quantite
                                                    // Log de transaction
                                                    console.log('Mise √† jour de la fiche perso de '+ perso.name)
                                                    // Mise √† jour du compte
                                                    compte.solde -= article.prix * achat.article_quantite
                                                    // Mention
                                                    equipementTrouve = true
                                                    // Ajout √† la liste des articles valid√©s
                                                    commandeValide.push({
                                                        nameArticle: article.name,
                                                        quantiteArticle: achat.article_quantite,
                                                        valeur: valeurAchat
                                                    })
                                                }
                                            })

                                            // Traitement si l'article n'√©tait pas encore pr√©sent
                                            if (!equipementTrouve)
                                            {
                                                // Ajout de l'article dans la liste des √©quipements
                                                perso.equipements.push({
                                                    libelle: article.name,
                                                    quantite: achat.article_quantite,
                                                    principal: false,
                                                    rouleau: false,
                                                    sousEquiements: []
                                                })
                                                // Log de transaction
                                                console.log('Mise √† jour de la fiche perso de '+ perso.name)
                                                // Mise √† jour du compte
                                                compte.solde -= article.prix * achat.article_quantite
                                                // Ajout √† la liste des articles valid√©s
                                                commandeValide.push({
                                                    nameArticle: article.name,
                                                    quantiteArticle: achat.article_quantite,
                                                    valeur: valeurAchat
                                                })
                                            }

                                            // Modification en cas d'achat d'un article unique
                                            if (article.quantite == 0)
                                            {
                                                // Changement du statut en achet√©
                                                article.statut = false
                                            }
                                        }
                                    }
                                }

                                // Mention de la correspondance
                                trouve = true
                            }
                        })

                        // V√©rification de l'absence de la fiche du client
                        if (!trouve)
                        {
                            // Notification
                            msg.reply('ü•∑üèΩ Navr√©, mais votre fiche n\'est pas pr√©sente dans la base de donn√©es.')
                        }
                    }
                })
            })

            // V√©rification de la mise √† jour du compte et de la fiche perso
            if (commandeValide.length > 0)
            {
                // Validation de la transation
                validiteTransactionCommande(compte, commandeValide, msg)

                // Mise √† jour de la fiche et du compte
                mAjFichePerso()
                mAjComptePerso()
            }else
            {
                // Transaction impossible
                msg.reply('‚ô®Ô∏è *TRANSACTION IMPOSSIBLE* ‚ô®Ô∏è\n\nVotre commande n\'a pas pu √™tre prise en compte. Veuillez v√©rifier la disposition de la commande et votre compte.\n\nü•∑üèΩ Merci.')
            }
            
            // Mention de pr√©sence du compte client
            client = true
        }
    })

    // V√©rification de l'absence du compte du client
    if (!client)
    {
        // Notification en cas d'absence du compte dans la boutique ninja
        msg.reply('ü•∑üèΩ Votre compte n\'existe pas en Boutique.')
    }
}
const validiteTransactionCommande = (client, commande, requete) => {
    // Total d'achat
    let total = 0

    // Transation valide
    let transationReussie = '‚ô®Ô∏è *TRANSACTION EFFECTUEE* ‚ô®Ô∏è\n\n'
    transationReussie += `_${client.grade}_ *${client.avatar}*, vous avez pass√© une commande d'articles ci-dessous cit√©s :\n\n`
    // Parcours des articles command√©s
    commande.forEach(achat => {
        // Affichage de l'achat valide
        transationReussie += '‚ñ´Ô∏è' + achat.quantiteArticle + ' ' + achat.nameArticle + ' : _' + achat.valeur + ' M$_\n'
        // Ajout au prix total de la commande
        total += achat.valeur
    })
    transationReussie += '\nCette transaction est valid√©e pour un montant total de *' + total + ' M$*.\n\n'
    transationReussie += '\`\`\`Bourse Ninja :\`\`\` *' + client.solde + ' M$*\n\n'
    transationReussie += 'ü•∑üèΩ Merci et √† bient√¥t !'

    // Envoie de la fin de transaction
    requete.reply(transationReussie)
}

/*
    * AUTORISATION DE L'UTILISATION DU BOT *
    * Variation suivant les sections
*/
const autorisation = async(msg, section) => {
    // R√©cup√©ration du num√©ro
    const membreId = await msg.getContact()
    // Variable de v√©rification
    let banni = false

    // V√©rification parmi les membres bannis
    if (restreints.all.length != 0)
    {
        restreints.all.forEach(membre => {
            if (membre == membreId.number)
            {
                // Membre banni de l'utilisation du bot
                banni = true
            }
        })
    }

    // V√©rification des bannis parmi de la section
    if (restreints[section].length != 0)
    {
        restreints[section].forEach(membre => {
            if (membre == membreId.number)
            {
                console.log('Membre banni du groupe ' + section)
                // return true
                banni = true
            }
        })
    }

    // R√©cup√©ration de l'autorisation
    return banni
}

/*
    * AUTORISATION DE FONCTION DE BANQUIERS *
    * V√©rification des banquiers
*/
const boutiquier = async(msg) => {
    // R√©cup√©ration du num√©ro
    const Boutiquier = await msg.getContact()
    // Variable de v√©rification
    let autorise = false

    // V√©rification de la pr√©sence du membre
    boutiquiers.forEach(salarie => {
        if (Boutiquier.number == salarie)
        {
            autorise = true
        }
    })

    // R√©cup√©ration de l'autorisation
    return autorise
}

/*
    * AUTORISATION DE FONCTION DE BANQUIERS *
    * V√©rification des banquiers
*/
const banquier = async(msg) => {
    // R√©cup√©ration du num√©ro
    const Banquier = await msg.getContact()
    // Variable de v√©rification
    let autorise = false

    // V√©rification de la pr√©sence du membre
    banquiers.forEach(salarie => {
        if (Banquier.number == salarie)
        {
            autorise = true
        }
    })

    // R√©cup√©ration de l'autorisation
    return autorise
}

/*
    * MENU D'OPTION DES REGLES *
    * D√©tection et r√©cup√©ration de la r√®gle
*/
const botSNG = (groupe) => {
    bot.on('message_create', (msg) => {
        // R√©cup√©ration des composants du message
        const { from, to, body } = msg

        // Tri des requ√™tes au bot  || (from == '33615641467@c.us')
        if ((from == groupe) || ((from == '33615641467@c.us') && (to == groupe)))
        {
            // R√©cup√©ration des infos de traitement
            const indice = body.substr(0, 1)
        
            // V√©rification de la pr√©sence de requ√™te
            if ((indice == '>'))
            {
                // Variable de v√©rification du statut de banissement du membre
                let banni = null

                // Requ√™te de v√©rification
                autorisation(msg, 'groupeP').then(val => {
                    // R√©cup√©ration de la r√©ponse d'authentification
                    banni = val.valueOf()

                    // V√©rification et disposition des r√®gles
                    if (!banni)
                    {
                        if ((body.substr(1).toLowerCase() == 'regles') || (body.substr(1).toLowerCase() == 'r√®gles'))
                        {
                            // Affichage du menu de r√®gles
                            let menuRegles = '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
                            menuRegles += '    ùêÖùêàùêÇùêáùêÑùêí ùêÉùêÑ ùêëùêÑùêÜùêãùêÑùêí ùêíùêçùêÜ\n'
                            menuRegles += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n'
                            menuRegles += '\`\`\`>fiche evo\`\`\` : Fiche d\'√©volution\n'
                            menuRegles += '\`\`\`>fiche orga\`\`\` : Fiche d\'organisation\n'
                            menuRegles += '\`\`\`>fiche perso\`\`\` : Fiche de perso vierge\n'
                            menuRegles += '\`\`\`>fiche postes\`\`\` : Fiche des emplois-salaire\n'
                            menuRegles += '\`\`\`>fiche creation\`\`\` : Fiche de cr√©ation perso\n'
                            menuRegles += '\`\`\`>fiche recap\`\`\` : Fiche r√©capitulative des r√®gles\n\n'
                            menuRegles += '\`\`\`>regle edo\`\`\` : R√®gles de l\'edo tensei\n'
                            menuRegles += '\`\`\`>regle jutsu\`\`\` : R√®gles cr√©ation jutsu\n'
                            menuRegles += '\`\`\`>regle senso\`\`\` : R√®gles ninjas sensoriels\n'
                            menuRegles += '\`\`\`>regle ajuste\`\`\` : R√®gles ajustement PCN\n\n'
                            menuRegles += 'ü•∑üèΩ Quelle r√®gle d√©sirez-vous voir ?'

                            // Affichage du menu des r√®gles
                            sendMessage(groupe, menuRegles)

                        } else if (body.substr(1, 5).toLowerCase() == 'fiche')
                        {
                            // R√©cup√©ration de la requ√™te
                            const requete = body.substr(7).toLowerCase()
                            // V√©rification
                            switch (requete)
                            {
                                case 'evo':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheEvolution = fs.readFileSync('./data/regles/evolution.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheEvolution.toString())
                                    break
                                
                                case 'orga':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheOrganisation = fs.readFileSync('./data/regles/organisation.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheOrganisation.toString())
                                    break

                                case 'perso':
                                    // R√©cup√©ration de la fiche perso
                                    let fichePerso = fs.readFileSync('./data/regles/newPerso.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(fichePerso.toString())
                                    break

                                case 'postes':
                                    // R√©cup√©ration de la fiche perso
                                    let fichePostes = fs.readFileSync('./data/regles/postes.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(fichePostes.toString())
                                    break
                                
                                case 'creation':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheCreationPerso = fs.readFileSync('./data/regles/creationPerso.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheCreationPerso.toString())
                                    break

                                case 'recap':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheRecap = fs.readFileSync('./data/regles/recap.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheRecap.toString())
                                    break
                            
                                default:
                                    // Notification d'absence de solution createFichePerso
                                    msg.reply('ü•∑üèΩ Myst√®re')
                                    break
                            }
                        } else if ((body.substr(1, 5).toLowerCase() == 'regle') || (body.substr(1, 5).toLowerCase() == 'r√®gle'))
                        {
                            // R√©cup√©ration de la requ√™te
                            const requete = body.substr(7).toLowerCase()
                            // V√©rification
                            switch (requete)
                            {
                                case 'edo':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheEdo = fs.readFileSync('./data/regles/edoTensei.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheEdo.toString())
                                    break
                                
                                case 'senso':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheSenso = fs.readFileSync('./data/regles/mudraSensoriel.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheSenso.toString())
                                    break
                                
                                case 'jutsu':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheJutsu = fs.readFileSync('./data/regles/jutsu.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheJutsu.toString())
                                    break

                                case 'ajuste':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheAjustement = fs.readFileSync('./data/regles/ajustement.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheAjustement.toString())
                                    break
                            
                                default:
                                    // Notification d'absence de solution
                                    msg.reply('ü•∑üèΩ Myst√®re')
                                    break
                            }
                        } else if (body.substr(1).toLowerCase() == 'avatars')
                        {
                            // Menu des options d'avatar
                            let menuAvatar = '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
                            menuAvatar += '    ùêéùêèùêìùêàùêéùêçùêí ùêÉùêÑùêí ùêÄùêïùêÄùêìùêÄùêëùêí\n'
                            menuAvatar += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n'
                            menuAvatar += '\`\`\`>avatar ages\`\`\`\n'
                            menuAvatar += '\`\`\`>avatar clans\`\`\`\n'
                            menuAvatar += '\`\`\`>avatar grades\`\`\`\n'
                            menuAvatar += '\`\`\`>avatar statuts\`\`\`\n'
                            menuAvatar += '\`\`\`>avatar equipes\`\`\`\n'
                            menuAvatar += '\`\`\`>avatar villages\`\`\`\n\n'
                            menuAvatar += '\`\`\`>avatar libres\`\`\`\n'
                            menuAvatar += '\`\`\`>avatar principaux\`\`\`\n'
                            menuAvatar += '\`\`\`>avatar secondaires\`\`\`\n\n'
                            menuAvatar += 'ü•∑üèΩ Quelle option d√©sirez-vous s√©lectionner ?'
                            
                            // Affichage du menu des options d'avatar
                            sendMessage(groupe, menuAvatar)

                        } else if ((body.substr(1, 6).toLowerCase() == 'avatar') && (body.substr(8, 1) != ' '))
                        {
                            // Requ√™te
                            const requete = body.substr(8).toLowerCase()

                            // Traitement de la requ√™te
                            switch (requete) {
                                case 'clans':
                                    // R√©ponse de la requ√™te de r√©cup√©ration des clans
                                    msg.reply(listClan())
                                    break

                                case 'villages':
                                    // R√©ponse de la requ√™te de r√©cup√©ration des clans
                                    msg.reply(listVillage())
                                    break
                                
                                case 'ages':
                                    // R√©ponse de la requ√™te de r√©cup√©ration des clans
                                    msg.reply(listAge())
                                    break

                                case 'grades':
                                    // R√©ponse de la requ√™te de r√©cup√©ration des clans
                                    msg.reply(listGrade())
                                    break

                                case 'statuts':
                                    // R√©ponse de la requ√™te de r√©cup√©ration des clans
                                    msg.reply(listStatut())
                                    break

                                case 'principaux':
                                    // R√©ponse de la requ√™te de r√©cup√©ration des perso principaux
                                    msg.reply(listPersoPSL('P'))
                                    break

                                case 'secondaires':
                                    // R√©ponse de la requ√™te de r√©cup√©ration des perso secondaires
                                    msg.reply(listPersoPSL('S'))
                                    break

                                case 'libres':
                                    // R√©ponse de la requ√™te de r√©cup√©ration des perso libres
                                    msg.reply(listPersoPSL('L'))
                                    break

                                case 'equipes':
                                    // R√©cup√©ration de la fiche de r√©partition des √©quipes
                                    let ficheEquipe = fs.readFileSync('./data/fiches/equipes.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheEquipe.toString())
                                    break
                            
                                default:
                                    // R√©cup√©ration du nom de l'avatar demand√©
                                    const avatar = body.substr(8).toLowerCase()
                                    // msg.reply(selectFichePerso2(avatar))

                                    // Requ√™te de r√©cup√©ration de la fiche
                                    selectFichePerso(avatar, msg, groupe)
                                    break
                            }
                        } else if ((body.substr(1, 6).toLowerCase() == 'profil') && (body.substr(8, 1) != ' '))
                        {
                            // Requ√™te
                            const requete = body.substr(8).toLowerCase()

                            // Traitement de la requ√™te
                            switch (requete) {
                                case 'tagar':
                                    // R√©cup√©ration de l'image de l'avatar
                                    const sourceImg = './assets/images/avatars/tagar_1.jpeg'
                                    sendImageAvatar(sourceImg, msg)
                                    break

                                case 'nitsuya':
                                    // R√©cup√©ration de l'image de l'avatar
                                    const sourceImg2 = './assets/images/avatars/tagar_1.jpeg'
                                    sendImageAvatar(sourceImg, msg)
                                    break
                                
                                case 'toka':
                                    // R√©cup√©ration de l'image de l'avatar
                                    const sourceImg3 = './assets/images/avatars/tagar_1.jpeg'
                                    // sendImageAvatar(sourceImg, msg)
                                    break
                            }
                        } else if (body.substr(0, 21) == '>>> *NEW FICHE PERSO*')
                        {
                            if ((from == '33615641467@c.us') && (to == groupe))
                            {
                                // Cr√©ation de la fiche perso
                                newPersoSNG(msg)
                            } else
                            {
                                msg.reply('ü•∑üèΩ *Genjutsu - kai !*')
                            }
                        } else if ((from == '33615641467@c.us') && (to == groupe) && (body.substr(1, 7).toLowerCase() == 'accueil')) 
                        {
                            // R√©cup√©ration du num√©ro √† ajouter
                            const num = msg.body.split(' ')
                            const newMembre = parseInt(num[1])

                            if (newMembre > 0)
                            {
                                // Ajout du nouveau membre
                                addMembre(newMembre, msg)
                            } else
                            {
                                // Log d'ajout impossible
                                console.log('Num√©ro invalide')
                            }
                        } else if ((from == '33615641467@c.us') && (to == groupe) && (body.substr(1, 9).toLowerCase() == 'desertion')) 
                        {
                            // R√©cup√©ration du num√©ro √† ajouter
                            const num = msg.body.split('@')
                            const newMembre = parseInt(num[1])
                            if (newMembre > 0)
                            {
                                // Supression d'un membre
                                supMembre(newMembre, msg)
                            } else
                            {
                                // Log de suppression impossible
                                console.log('Num√©ro invalide')
                            }
                        } else if (body == '>tournoi')
                        {
                            // Message du lien du tournoi
                            let tournoi = '‚ô®Ô∏è *TOURNOI SNG POWER TEST* ‚ô®Ô∏è\n\n'
                            tournoi += '_Salutation √† vous, Shinobi de la New Generation !_\n\n'
                            tournoi += 'Nouvelle ann√©e, nouveaux d√©fis ! C\'est ainsi qu\'√©merge le premier tournoi de l\'ann√©e !\n\n'
                            tournoi += '\`\`\`Suivez l\'√©volution du tournoi :\`\`\`\n\n'
                            tournoi += 'üëáüèª\nhttps://challonge.com/fr/1ynr5ae0\n'
                            tournoi += '*Merci !‚ô®Ô∏è*'
                            
                            // Envoi du lien d'annonce du tournoi
                            sendMessage(groupe, tournoi)
                        } else
                        {
                            // Notification d'absence de solution
                            msg.reply('ü•∑üèΩ La vie n\'est pas rose...')
                        }
                    }
                })
            }
        }
    })
}

/*
    * GESTION DES FICHES DE LA BDD *
    * Actualisation de PCN et autres
*/
const botDB = (groupe) => {
    bot.on('message_create', (msg) => {
        // R√©cup√©ration des composants du message
        const { from, to, body } = msg

        // Tri des requ√™tes au bot  (from == groupe) || ((from == '33615641467@c.us') && (to == groupe))
        if ((from == groupe) || ((from == '33615641467@c.us') && (to == groupe)))
        {
            if (body.substr(0, 13).toLowerCase() == 'actualisation')
            {
                // Requ√™te d'actualisation de fiche
                actualisationFiche(body, msg)

            } else if ((from == '33615641467@c.us') && (to == groupe) && (body.substr(1, 7).toLowerCase() == 'accueil')) 
            {
                // R√©cup√©ration du num√©ro √† ajouter
                const num = msg.body.split(' ')
                const newMembre = parseInt(num[1])

                if (newMembre > 0)
                {
                    // Ajout du nouveau membre
                    addMembre(newMembre, msg)
                } else
                {
                    // Log d'ajout impossible
                    console.log('Num√©ro invalide')
                }
            } else if ((from == '33615641467@c.us') && (to == groupe) && (body.substr(1, 9).toLowerCase() == 'desertion')) 
            {
                // R√©cup√©ration du num√©ro √† ajouter
                const num = msg.body.split('@')
                const newMembre = parseInt(num[1])
                if (newMembre > 0)
                {
                    // Supression d'un membre
                    supMembre(newMembre, msg)
                } else
                {
                    // Log de suppression impossible
                    console.log('Num√©ro invalide')
                }
            }
        }
    })
}

/*
    * MENU D'OPTION DU CLASSEMENT SHINOBI *
    * Adaptation all groupe
*/
const botShinobi = (groupe) => {
    bot.on('message_create', (msg) => {
        // R√©cup√©ration des composants du message
        const { from, to, body } = msg

        // Tri des requ√™tes au bot
        if ((from == groupe) || ((from == '33615641467@c.us') && (to == groupe)))
        {
            // R√©cup√©ration des infos de traitement
            const indice = body.substr(0, 1)
        
            // V√©rification de la pr√©sence de requ√™te
            if ((indice == '!'))
            {
                // Variable de v√©rification du statut de banissement du membre
                let banni = null

                // Requ√™te de v√©rification
                autorisation(msg, 'groupeP').then(val => {
                    // R√©cup√©ration de la r√©ponse d'authentification
                    banni = val.valueOf()

                    // V√©rification et disposition des r√®gles
                    if (!banni)
                    {
                        if (body.toLowerCase() == '! fiche')
                        {
                            // Requ√™te de r√©cup√©ration du personnage
                            selectPersoClassement(msg, groupe)
                        } else if (body.substr(2).toLowerCase() == 'classement')
                        {
                            // Menu des options de classement
                            let menuClassement = '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
                            menuClassement += '      ùêÇùêãùêÄùêíùêíùêÑùêåùêÑùêçùêì ùêíùêáùêàùêçùêéùêÅùêà\n'
                            menuClassement += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n'
                            menuClassement += '\`\`\`! fiche\`\`\`\n'
                            menuClassement += '\`\`\`! fiche defi\`\`\`\n'
                            menuClassement += '\`\`\`! fiche team\`\`\`\n'
                            menuClassement += '\`\`\`! fiche bilan\`\`\`\n'
                            menuClassement += '\`\`\`! fiche bilan off\`\`\`\n\n'
                            menuClassement += '\`\`\`! classement team\`\`\`\n'
                            menuClassement += '\`\`\`! classement perso\`\`\`\n'
                            menuClassement += '\`\`\`! classement regles\`\`\`\n\n'
                            menuClassement += 'ü•∑üèΩ Quelle option d√©sirez-vous s√©lectionner ?'
                            
                            // Affichage du menu des options de classement
                            sendMessage(groupe, menuClassement)

                        } else if (body.substr(2, 5).toLowerCase() == 'fiche')
                        {
                            // R√©cup√©ration de la requ√™te
                            const requete = body.substr(8).toLowerCase()
                            // V√©rification
                            switch (requete)
                            {
                                case 'defi':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheDefi = fs.readFileSync('./data/classement/ficheDefi.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheDefi.toString())
                                    break
                                
                                case 'bilan':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheBilanDefi = fs.readFileSync('./data/classement/bilanDefi.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheBilanDefi.toString())
                                    break

                                case 'bilan off':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheBilanDefiOff = fs.readFileSync('./data/classement/bilanOfficialisation.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheBilanDefiOff.toString())
                                    break
                                        
                                case 'team':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheTeam = fs.readFileSync('./data/classement/ficheTeam.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheTeam.toString())
                                    break
                            }
                        } else if (body.substr(2, 10).toLowerCase() == 'classement')
                        {
                            // R√©cup√©ration de la requ√™te
                            const requete = body.substr(13).toLowerCase()
                            // V√©rification
                            switch (requete)
                            {
                                case 'team':
                                    console.log('Fiche des team du classement')
                                    // R√©ponse de la requ√™te de r√©cup√©ration des team du classement shinobi
                                    // msg.reply(listPersoPSL('Team'))
                                    break

                                case 'perso':
                                    // R√©ponse de la requ√™te de r√©cup√©ration des perso du classement shinobi
                                    // msg.reply(listPersoClassement())
                                    listPersoClassement(msg)
                                    break

                                case 'regles':
                                    // R√©cup√©ration de la fiche perso
                                    let ficheClassement = fs.readFileSync('./data/classement/reglesClassement.txt', 'utf8')
                                    // Envoi des r√®gles
                                    msg.reply(ficheClassement.toString())
                                    break
                            }
                        } else if ((body.substr(2, 4).toLowerCase() == 'team') && (body.substr(5, 1) != ' '))
                        {
                            // R√©cup√©ration du nom de la team
                            const team = body.substr(6).trim()
                            // Requ√™te de r√©cup√©ration de la fiche
                            selectTeamClassement(team, msg, groupe)

                        } else if (body.substr(2, 3).toLowerCase() == 'new')
                        {
                            if (((from == '33615641467@c.us') && (to == groupe)) || (from == '237696813190@c.us'))
                            {
                                // R√©cup√©ration de la requ√™te
                                const preparation = body.split('\n')
                                const requete = preparation[0].substr(5).toLowerCase().trim()
                                // V√©rification
                                switch (requete)
                                {
                                    case 'team':
                                        // Notification finale
                                        createTeamShinobi(msg)
                                        break
                                    
                                    case 'perso':
                                        // Notification finale
                                        createPersoShinobi(msg)
                                        break
                                
                                    default:
                                        // Notification d'absence de solution createFichePerso
                                        msg.reply('ü•∑üèΩ Humm')
                                        break
                                }
                            } else
                            {
                                msg.reply('ü•∑üèΩ *Genjutsu - kai !*')
                            }
                        } else if ((from == '33615641467@c.us') && (to == groupe) && (body.substr(2, 9).toLowerCase() == 'bienvenue')) 
                        {
                            // R√©cup√©ration du num√©ro √† ajouter
                            const num = msg.body.split(' ')
                            const newMembre = parseInt(num[2])

                            if (newMembre > 0)
                            {
                                // Ajout du nouveau membre
                                addMembre(newMembre, msg)
                            } else
                            {
                                // Log d'ajout impossible
                                console.log('Num√©ro invalide')
                            }
                        } else if ((from == '33615641467@c.us') && (to == groupe) && (body.substr(2, 3).toLowerCase() == 'bye')) 
                        {
                            // R√©cup√©ration du num√©ro √† ajouter
                            const num = msg.body.split('@')
                            const newMembre = parseInt(num[1])
                            if (newMembre > 0)
                            {
                                // Supression d'un membre
                                supMembre(newMembre, msg)
                            } else
                            {
                                // Log de suppression impossible
                                console.log('Num√©ro invalide')
                            }
                        } else if (body == '>tournoi')
                        {
                            // Message du lien du tournoi
                            let tournoi = '‚ô®Ô∏è *TOURNOI SNG POWER TEST* ‚ô®Ô∏è\n\n'
                            tournoi += '_Salutation √† vous, Shinobi de la New Generation !_\n\n'
                            tournoi += 'Nouvelle ann√©e, nouveaux d√©fis ! C\'est ainsi qu\'√©merge le premier tournoi de l\'ann√©e !\n\n'
                            tournoi += '\`\`\`Suivez l\'√©volution du tournoi :\`\`\`\n\n'
                            tournoi += 'üëáüèª\nhttps://challonge.com/fr/1ynr5ae0\n'
                            tournoi += '*Merci !‚ô®Ô∏è*'
                            
                            // Envoi du lien d'annonce du tournoi
                            sendMessage(groupe, tournoi)
                        }
                    }
                })
            }
        }
    })
}

const sendImageAvatar = async(source, newMsg) => {
    const chat = await newMsg.getChat()
    const media = MessageMedia.fromFilePath(source);
    chat.sendMessage(media)
}


/*
    * MENU D'ORGANISATION RP PRIME *
*/
const botPrime = (groupe) => {
    bot.on('message_create', (msg) => {
        // R√©cup√©ration des composants du message
        const { from, to, body } = msg

        // Tri des requ√™tes au bot  || (from == '33615641467@c.us')
        if ((from == groupe) || ((from == '33615641467@c.us') && (to == groupe)))
        {
            // R√©cup√©ration des infos de traitement
            const indice = body.substr(0, 1)
        
            // V√©rification de la pr√©sence de requ√™te
            if ((indice == '#'))
            {
                // Variable de v√©rification du statut de banissement du membre
                let banni = null

                // Requ√™te de v√©rification
                autorisation(msg, 'neonPrime').then(val => {
                    // R√©cup√©ration de la r√©ponse d'authentification
                    banni = val.valueOf()

                    // V√©rification et disposition des r√®gles
                    if (!banni)
                    {
                        if (body.substr(1).toLowerCase() == 'commandes')
                        {
                            // R√©cup√©ration du menu
                            let menuPrime = fs.readFileSync('./neon/fiches/menuPrime.txt', 'utf8')
                            // Envoi du menu prime
                            msg.reply(menuPrime.toString())

                        } else if (body.substr(1).toLowerCase() == 'army')
                        {
                            // R√©cup√©ration des r√®gles
                            let army = fs.readFileSync('./neon/fiches/armee.txt', 'utf8')
                            // Envoi des r√®gles de l'arm√©e
                            msg.reply(army.toString())

                        } else if (body.substr(1).toLowerCase() == 'horsLaLoi')
                        {
                            // R√©cup√©ration des r√®gles
                            let horsLaLoi = fs.readFileSync('./neon/fiches/horsLaLoi.txt', 'utf8')
                            // Envoi des r√®gles des hors la loi
                            msg.reply(horsLaLoi.toString())

                        } else if (body.substr(1).toLowerCase() == 'evolution')
                        {
                            // R√©cup√©ration des r√®gles
                            let evolution = fs.readFileSync('./neon/fiches/niveaux.txt', 'utf8')
                            // Envoi des r√®gles de niveaux d'√©volution
                            msg.reply(evolution.toString())

                        } else if ((body.substr(1, 6).toLowerCase() == 'avatar') && (body.substr(8, 1) != ' '))
                        {
                            // Requ√™te
                            const requete = body.substr(8).toLowerCase()

                            // Traitement de la requ√™te
                            switch (requete) {
                                case 'map':
                                    // R√©ponse de la requ√™te de r√©cup√©ration des maps
                                    // msg.reply(listClan())
                                    msg.reply('ü§ñ En cours de d√©veloppement...')
                                    break
                            
                                default:
                                    // R√©cup√©ration du nom de l'avatar demand√©
                                    const avatar = body.substr(8).toLowerCase()

                                    // Requ√™te de r√©cup√©ration de la fiche
                                    selectFichePersoPrime(avatar, msg, groupe)
                                    break
                            }
                        } else if (body.substr(1, 1).toLowerCase() == ' ')
                        {
                            // Requ√™te
                            const requete = body.substr(2).toLowerCase()

                            // Traitement de la requ√™te
                            switch (requete) {
                                case 'neo':
                                    // R√©cup√©ration de l'image
                                    const sourceImg = './neon/images/bot/main.jpeg'
                                    sendImageAvatar(sourceImg, msg)
                                    break

                                case 'neo smile':
                                    // R√©cup√©ration de l'image
                                    const sourceImg2 = './neon/images/bot/smile.jpeg'
                                    sendImageAvatar(sourceImg2, msg)
                                    break

                                case 'army':
                                    // R√©cup√©ration de l'image
                                    const sourceImg3 = './neon/images/army.jpeg'
                                    sendImageAvatar(sourceImg3, msg)
                                    break

                                case 'hors la loi':
                                    // R√©cup√©ration de l'image
                                    const sourceImg4 = './neon/images/horsLaLoi.jpeg'
                                    sendImageAvatar(sourceImg4, msg)
                                    break
                            }
                        } else if (body.substr(1, 5) == 'build')
                        {
                            if (((from == '33615641467@c.us') && (to == groupe)) || ((from == '8618752355751@c.us') && (to == groupe)))
                            {
                                // Cr√©ation de la fiche perso
                                createPersoPrime(msg)
                            } else
                            {
                                msg.reply('ü§ñ *La vie est rose*')
                            }
                        } else if (body.substr(0, 23) == '# *ACTUALISATION PRIME*'){
                            if (((from == '33615641467@c.us') && (to == groupe)) || (from == '8618752355751@c.us'))
                            {
                                // Requ√™te d'actualisation de fiche
                                console.log('Requ√™te d\'actualisation')
                                actualisationFichePrime(body, msg)

                            }
                        } else if (((from == '8618752355751@c.us') && (to == groupe)) && (body.substr(1, 7).toLowerCase() == 'accueil')) 
                        {
                            // R√©cup√©ration du num√©ro √† ajouter
                            const num = msg.body.split(' ')
                            const newMembre = parseInt(num[1])

                            if (newMembre > 0)
                            {
                                // Ajout du nouveau membre
                                addMembre(newMembre, msg)
                            } else
                            {
                                // Log d'ajout impossible
                                console.log('ü§ñ Num√©ro invalide')
                            }
                        } else if (((from == '8618752355751@c.us') && (to == groupe)) && (body.substr(1, 9).toLowerCase() == 'desertion')) 
                        {
                            // R√©cup√©ration du num√©ro √† ajouter
                            const num = msg.body.split('@')
                            const newMembre = parseInt(num[1])
                            if (newMembre > 0)
                            {
                                // Supression d'un membre
                                supMembre(newMembre, msg)
                            } else
                            {
                                // Log de suppression impossible
                                console.log('ü§ñ Num√©ro invalide')
                            }
                        }
                    }
                })
            }
        }
    })
}


/*
    * AJOUT DE NOUVEAU MEMBRES *
    * Fonction d'ajout de membres
*/
const addMembre = async(number, msg) => {
    // R√©cup√©ration de l'instance du groupe
    const theGroup = await msg.getChat()
    // V√©rificatoion du num
    const membre = `${number}@c.us`
    // Ajout du membre
    theGroup.addParticipants([membre])
    // Log de l'ajout du du num√©ro
    console.log('Ajout de +' + number)
    // Notification de fin d'ajout du membre
    // msg.reply('*Nouveau membre ajout√© !*')
}
/*
    * SUPRESSION DE MEMBRES *
    * Fonction de supression de membres
*/
const supMembre = async(number, msg) => {
    // R√©cup√©ration de l'instance du groupe
    const theGroup = await msg.getChat()
    // V√©rificatoion du num
    const membre = `${number}@c.us`
    // Ajout du membre
    theGroup.removeParticipants([membre])
    // Log de l'ajout du du num√©ro
    console.log('Supression de +' + number)
    // Notification de fin de supression du membre
    // msg.reply('*Membre supprim√© avec succ√®s !*')
}


/*
    * AFFICHAGE DES COMPTES DE LA BOUTIQUE *
    * Comptes et armes principales
*/
const afficherComptes = (msg) => {
    // Variables de stockage des comptes
    let ficheCompte = {
        dataCompte: '',
        listeNum: []
    }
    let compteNinja = 'ùë©ùë®ùëµùë∏ùëºùë¨ ùë´ùë¨ ùë≥ùë® ùë™ùë∂ùë¥ùë¥ùëºùëµùë®ùëºùëª√â\n\n'

    // Ajout de la description de la monnaie Shinobi
    compteNinja += '*M$* = Monnaie $hinobi\n\n'

    // R√©cup√©ration de tous les comptes disponibles
    comptes.forEach(compte => {
        compteNinja += '‚ô®Ô∏è *' + compte.avatar + '* (@' + compte.utilisateur + ')\n'
        compteNinja += '‚ñ™Ô∏èBourse ninja : ' + compte.solde + ' M$\n'
        compteNinja += '‚ñ™Ô∏èGrade : '+ compte.grade + '\n\n'

        // Sauvegarde du num√©ro
        ficheCompte.listeNum.push(compte.utilisateur)
    })

    // R√©cup√©ration finale de la fiche
    ficheCompte.dataCompte = compteNinja
    // Pr√©paration au tague
    tagueAllCompte(ficheCompte, msg)
}


/*
    * MISE A JOUR AVATAR DE LA BASE DONNEES *
*/
const mAjFichePerso = () => {
    // Actualisation de la base de donn√©es
    console.log('Test')
    fs.writeFileSync('./data/fiches/dataPerso.json', JSON.stringify(dataPerso), 'utf8')
}

/*
    * MISE A JOUR PERSO CLASSEMENT SHINOBI *
*/
const mAjFichePersoClassement = () => {
    // Actualisation de la base de donn√©es
    fs.writeFileSync('./data/classement/dataPersoClassement.json', JSON.stringify(dataPersoClassement), 'utf8')
}

/*
    * MISE A JOUR TEAM CLASSEMENT SHINOBI *
*/
const mAjFicheTeamClassement = () => {
    // Actualisation de la base de donn√©es
    fs.writeFileSync('./data/classement/dataTeamClassement.json', JSON.stringify(dataTeamClassement), 'utf8')
}

/*
    * MISE A JOUR DES COMPTES AVATAR *
*/
const mAjComptePerso = () => {
    // Actualisation des comptes perso
    console.log('Test')
    fs.writeFileSync('./data/banque/comptes.json', JSON.stringify(comptes), 'utf8')
}

/*
    * MISE A JOUR DES ARTICLES *
*/
const mAjArticlesPerso = () => {
    // Actualisation des articles
    fs.writeFileSync('./data/boutique/articles.json', JSON.stringify(articles), 'utf8')
}

/*
    * ACTUALISATION DE PCN *
*/
const actualisationPCN = (fiche, data, competence) => {
    if (data.substr(10, 1) == '+')
    {
        // R√©cup√©ration de nombre de PCN √† ajouter
        const ajout = parseInt(data.substr(11))
        // Ajout des PCN
        fiche.competences[competence] += ajout
        return '‚ñ´Ô∏èAjout de ' + ajout + ' PCN ' + competence +'\n'
    }
    if (data.substr(10, 1) == '-')
    {
        // R√©cup√©ration de nombre de PCN √† retirer
        const soustraction = parseInt(data.substr(11))
        // Soustraction des PCN
        fiche.competences[competence] -= soustraction
        // Note de l'actualisation
        return '‚ñ´Ô∏èSoustraction de ' + soustraction + ' PCN ' + competence +'\n'
    }
}

/*
    * ACTUALISATION DE JUTSU *
*/
const actualisationJUTSU = (fiche, data, type) => {
    // R√©cup√©ration de nombre de PCN √† ajouter
    const newJutsu = data.substr(12).trim()
    console.log(newJutsu)
    // Ajout de la technique
    fiche.jutsu[type.id].listJutsu.push(newJutsu)
    if (type.rang == 'L')
    {
        return '‚ñ´Ô∏èAjout de jutsu rang libre\n'
    } else
    {
        return '‚ñ´Ô∏èAjout de jutsu rang ' + type.rang + '\n'
    }
}

/*
    * ACTUALISATION COMPLETE DE LA FICHE AVATAR *
*/
const actualisationFiche = (recap, newMsg) => {
    // Tri du r√©capitulatif et r√©partition des requ√™tes
    const requete = recap.split('\n')
    // R√©cup√©ration du nom de l'avatar
    const namePerso = requete[2].substr(0).trim()

    // Variable de v√©rification d'actualisation
    let actualisation = false
    let recapitulatif = '*RECAPITULATIF D\'ACTUALISATION*\n\n'

    // Recherche de la fiche perso
    dataPerso.forEach(perso => {
        if ((perso.name == namePerso) || (perso.name.toLowerCase() == namePerso.toLowerCase()))
        {
            // Actualisation des donn√©es de la fiche
            requete.forEach(ligne => {
                // Actualisation des PCN
                if (ligne.substr(2, 3) == 'PCN')
                {
                    switch (ligne.substr(6, 1))
                    {
                        case 'A':
                            // Actualisation des PCN agilit√©
                            recapitulatif += actualisationPCN(perso, ligne, 'agilite')
                            break
                        case 'V':
                            // Actualisation des PCN vitesse
                            recapitulatif += actualisationPCN(perso, ligne, 'vitesse')
                            break
                        case 'P':
                            // Actualisation des PCN precision
                            recapitulatif += actualisationPCN(perso, ligne, 'precision')
                            break
                        case 'F':
                            // Actualisation des PCN force brute
                            recapitulatif += actualisationPCN(perso, ligne, 'force')
                            break
                        case 'E':
                            // Actualisation des PCN endurance
                            recapitulatif += actualisationPCN(perso, ligne, 'endurance')
                            break
                        case 'S':
                            // Actualisation des PCN capacit√©s sensorielles
                            recapitulatif += actualisationPCN(perso, ligne, 'senso')
                            break
                        case 'C':
                            // Note de l'actualisation
                            recapitulatif += '‚ñ´Ô∏èLimite endurance de clan : ' + perso.limiteClan + ' => '
                            if (ligne.substr(10, 1) == '+')
                            {
                                // R√©cup√©ration des limites √† augmenter
                                const ajout = parseInt(ligne.substr(11))
                                // Augmentation des limites
                                perso.competences.limiteClan += ajout
                                // Note de fin d'actualisation
                                recapitulatif += perso.competences.limiteClan + '\n'
                            }
                            if (ligne.substr(10, 1) == '-')
                            {
                                // R√©cup√©ration des limites √† restreindre
                                const soustraction = parseInt(ligne.substr(11))
                                // Soustraction des limites
                                perso.competences.limiteClan -= soustraction
                                // Note de fin d'actualisation
                                recapitulatif += perso.competences.limiteClan + '\n'
                            }
                            break
                    }
                }
                // Actualisation de jutsu
                if (ligne.substr(2, 5) == 'jutsu')
                {
                    if (ligne.substr(8, 1) == 'C' || ligne.substr(8, 1) == 'D' || ligne.substr(8, 1) == 'E')
                    {
                        // Actualisation de la technique
                        recapitulatif += actualisationJUTSU(perso, ligne, {
                            id: 0,
                            rang: ligne.substr(8, 1)
                        })
                    } else if (ligne.substr(8, 1) == 'B' || ligne.substr(8, 1) == 'A')
                    {
                        // Actualisation de la technique
                        recapitulatif += actualisationJUTSU(perso, ligne, {
                            id: 1,
                            rang: ligne.substr(8, 1)
                        })
                    } else {
                        // Actualisation de la technique
                        recapitulatif += actualisationJUTSU(perso, ligne, {
                            id: 2,
                            rang: ligne.substr(8, 1)
                        })
                    }
                }
                // Actualisation du nom
                if (ligne.substr(2, 3).toLowerCase() == 'nom')
                {
                    // Actualisation du nom
                    recapitulatif += '‚ñ´Ô∏è' + perso.name
                    perso.name = ligne.substr(8).trim()
                    recapitulatif += ' => _'+ perso.name +'_\n'
                }
                // Actualisation de l'√©treinte
                if (ligne.substr(2, 8).toLowerCase() == 'etreinte')
                {
                    // Modification de l'√©treinte
                    recapitulatif += '‚ñ´Ô∏è' + perso.competences.etreinte
                    perso.competences.etreinte = ligne.substr(13).trim()
                    recapitulatif += ' => _'+ perso.competences.etreinte +'_\n'
                }
                // Actualisation du village
                if (ligne.substr(2, 7).toLowerCase() == 'village')
                {
                    // Actualisation du village actuel
                    recapitulatif += '‚ñ´Ô∏è' + perso.village
                    perso.village = ligne.substr(12).trim()
                    recapitulatif += ' => _'+ perso.village +'_\n'
                }
                // Actualisation de l'√¢ge
                if (ligne.substr(2, 3).toLowerCase() == 'age')
                {
                    // Actualisation de l'√¢ge actuel
                    recapitulatif += '‚ñ´Ô∏è' + perso.age
                    perso.age = ligne.substr(8).trim()
                    recapitulatif += 'ans => _'+ perso.age +'ans_\n'
                }
                // Actualisation de la taille
                if (ligne.substr(2, 6).toLowerCase() == 'taille')
                {
                    // Actualisation de la taille
                    recapitulatif += '‚ñ´Ô∏è' + perso.taille
                    perso.taille = ligne.substr(11).trim()
                    recapitulatif += 'm => _'+ perso.taille +'m_\n'
                }
                // Actualisation du grade
                if (ligne.substr(2, 5).toLowerCase() == 'grade')
                {
                    // Actualisation du grade actuel
                    recapitulatif += '‚ñ´Ô∏è' + perso.grade
                    perso.grade = ligne.substr(10).trim()
                    recapitulatif += ' => _'+ perso.grade +'_\n'
                }
                // Actualisation du num√©ro utilisateur
                if (ligne.substr(2, 4).toLowerCase() == 'user')
                {
                    // Actualisation du num√©ro
                    perso.user = ligne.substr(8).trim()
                    recapitulatif += '‚ñ´Ô∏èNouvel utilisateur : +'+ perso.user +'_\n'
                }
                // Actualisation d'affinit√©
                if (ligne.substr(2, 8).toLowerCase() == 'affinite')
                {
                    // Actualisation de l'affinit√©
                    let present = false
                    perso.affinite.forEach(affinite => {
                        if (ligne.substr(13).toLowerCase() == affinite.toLowerCase())
                        {
                            present = true
                        }
                    })
                    if (!present)
                    {
                        perso.affinite.push(ligne.substr(13).trim())
                        recapitulatif += '‚ñ´Ô∏èAjout d\'affinit√© : + _'+ ligne.substr(13).trim() +'_\n'
                    }
                }
                // Actualisation dE capacit√© particuli√®re
                if (ligne.substr(2, 5).toLowerCase() == 'cap p')
                {
                    // Ajout de capacit√©s h√©r√©ditaires
                    let present = false
                    perso.capHereditaire.forEach(cap => {
                        if (ligne.substr(10).toLowerCase() == cap.toLowerCase())
                        {
                            present = true
                        }
                    })
                    if (!present)
                    {
                        perso.capCompSpeciale = ligne.substr(10).trim()
                        recapitulatif += '‚ñ´Ô∏èAjout de cap particuli√®re : + _'+ ligne.substr(10).trim() +'_\n'
                    }
                }
                // Actualisation dE capacit√© h√©r√©ditaire
                if (ligne.substr(2, 5).toLowerCase() == 'cap h')
                {
                    // Ajout de capacit√©s h√©r√©ditaires
                    let present = false
                    perso.capHereditaire.forEach(cap => {
                        if (ligne.substr(10).toLowerCase() == cap.toLowerCase())
                        {
                            present = true
                        }
                    })
                    if (!present)
                    {
                        perso.capHereditaire.push(ligne.substr(10).trim())
                        recapitulatif += '‚ñ´Ô∏èAjout de cap h√©r√©ditaire : + _'+ ligne.substr(10).trim() +'_\n'
                    }
                }
                // Actualisation de statut
                if (ligne.substr(2, 6).toLowerCase() == 'statut')
                {
                    // Modification du statut
                    recapitulatif += '‚ñ´Ô∏è' + perso.statut
                    perso.statut = ligne.substr(11).trim()
                    recapitulatif += ' => _'+ perso.statut +'_\n'
                }
                // Actualisation du chakra
                if (ligne.substr(2, 6).toLowerCase() == 'chakra')
                {
                    // Modification de chakra
                    recapitulatif += '‚ñ´Ô∏è' + perso.chakra
                    perso.chakra = parseInt(ligne.substr(11).trim())
                    recapitulatif += ' => _'+ perso.chakra +' UT_\n'
                }
                // Actualisation de l'√©quipement principal
                if (ligne.substr(2, 6).toLowerCase() == 'arme p')
                {
                    // Actualisation de l'arme principale
                    recapitulatif += '‚ñ´Ô∏è' + perso.armePrincipale
                    perso.armePrincipale = ligne.substr(11).trim()
                    recapitulatif += ' => _'+ perso.armePrincipale.trim() +'_\n'
                }
                // Actualisation de mission de rang D
                if (ligne.substr(2, 7).toLowerCase() == 'mission')
                {
                    // R√©cup√©ration des param√®tres de la requ√™te d'actualisation
                    const statMission = ligne.substr(14).split('/')
                    const missionReussi = parseInt(statMission[0])
                    const nameMission = ligne.substr(10, 1)

                    // V√©rification et actualisation
                    if ((missionReussi == 1) || (missionReussi == 2))
                    {
                        switch (nameMission)
                        {
                            case 'D':
                                // Actualisation mission de rang D
                                perso.missions[0].reussi += missionReussi
                                perso.missions[0].total += parseInt(statMission[1])
                                recapitulatif += '‚ñ´Ô∏èStats mission rang ' + nameMission + ' actualis√©es\n'
                                break
                            case 'C':
                                // Actualisation mission de rang C
                                perso.missions[1].reussi += missionReussi
                                perso.missions[1].total += parseInt(statMission[1])
                                recapitulatif += '‚ñ´Ô∏èStats mission rang ' + nameMission + ' actualis√©es\n'
                                break
                            case 'B':
                                // Actualisation mission de rang B
                                perso.missions[2].reussi += missionReussi
                                perso.missions[2].total += parseInt(statMission[1])
                                recapitulatif += '‚ñ´Ô∏èStats mission rang ' + nameMission + ' actualis√©es\n'
                                break
                            case 'A':
                                // Actualisation mission de rang A
                                perso.missions[3].reussi += missionReussi
                                perso.missions[3].total += parseInt(statMission[1])
                                recapitulatif += '‚ñ´Ô∏èStats mission rang ' + nameMission + ' actualis√©es\n'
                                break
                            case 'S':
                                // Actualisation mission de rang S
                                perso.missions[4].reussi += missionReussi
                                perso.missions[4].total += parseInt(statMission[1])
                                recapitulatif += '‚ñ´Ô∏èStats mission rang ' + nameMission + ' actualis√©es\n'
                                break
                        }
                    }
                }
                // Actualisation de l'exp√©rience ninja
                if (ligne.substr(2, 2).toLowerCase() == 'xp' && ligne.substr(2).includes(' : '))
                {
                    // Actualisation des donn√©es de l'exp√©rience
                    const newXp = ligne.substr(7).trim().split(' : ')
                    console.log(newXp)
                    perso.experience.push({
                        date: newXp[0],
                        description: newXp[1]
                    })
                    recapitulatif += '‚ñ´Ô∏èNouvelle ex√©perience ninja\n'
                }
            })
            // Actualisation
            mAjFichePerso()
            // Actualisation effectu√©e
            actualisation = true
        }
    })

    // V√©rification de l'actualisation
    if (actualisation)
    {
        // Notification de succ√®s d'actualisation
        newMsg.reply(recapitulatif + '\n ```Actualisation effectu√©e !```')
    } else
    {
        // Notification d'absence de la fiche
        newMsg.reply('ü•∑üèΩ Fiche non disponible. Veuillez v√©rifier le nom du perso.')
    }
}

const recupIdGroup = async(message) => {
    const groupId = await message.getChat()
    const id = groupId.id
    return id
}

// Test tague
const tague = (groupe) => {
    bot.on('message_create', async (msg) => {
        if(msg.body === '>tag' && (msg.from === groupe) || ((msg.body === '>tag') && (msg.from == '33615641467@c.us') && (msg.to == groupe)))
        {
            let chat = await msg.getChat()

            for(let participant of chat.participants)
            {
                const contact = await bot.getContactById(participant.id._serialized);
                
                if (contact.number == '33615641467')
                {
                    await chat.sendMessage(`Yo @${contact.number}`, {
                        mentions: [contact]
                    })
                }
            }
        }
    })
}

/*
    * ENVOI DES FICHES TAGUES AU NOM DE L'UTILISATEUR *
*/
const tagueFiche = async(ficheResultat, newMsg, groupe) => {
    // R√©cup√©ration de la discussion de groupe SNG
    const SNG = await newMsg.getChat()

    // Variable de test de pr√©sence du membre utilisateur de la fiche
    let trouve = false

    // Recherche du contact de l'utiisateur de la fiche
    for(let participant of SNG.participants)
    {
        // Stockage du contact
        const contact = await bot.getContactById(participant.id._serialized);
        
        // V√©rification des coordonn√©es
        if (contact.number == ficheResultat.number)
        {
            // Mise √† disposition de la fiche tagu√©e
            await SNG.sendMessage(ficheResultat.dataFiche, {
                mentions: [contact]
            })
            // Mention de pr√©sence du membre
            trouve = true
        }
    }

    // Fiche en absence du membre
    if (!trouve)
    {
        // Mise √† disposition de la fiche non tagu√©e
        sendMessage(groupe, ficheResultat.dataFiche)
    }
}

/*
    * ENVOI DES COMPTES TAGUES AU NOM DE L'UTILISATEUR *
*/
const tagueAllCompte = async(ficheCompte, newMsg) => {
    // R√©cup√©ration de la discussion de groupe SNG
    const BoutiqueNinja = await newMsg.getChat()

    // Tableau de r√©cup√©ration des contacts de comptes
    let mentions = []

    // Recherche du contact de l'utiisateur de la fiche
    for(let participant of BoutiqueNinja.participants)
    {
        // Stockage du contact
        const contact = await bot.getContactById(participant.id._serialized)

        // R√©cup√©ration des contacts pr√©sents dans la boutique
        ficheCompte.listeNum.forEach(num => {
            // V√©rification des coordonn√©es
            if (contact.number == num)
            {
                // R√©cup√©ration du contact correspondant
                mentions.push(contact)
            }
        })
    }

    // Mise √† disposition de la fiche tagu√©e
    await BoutiqueNinja.sendMessage(ficheCompte.dataCompte, { mentions })
}

/*
    * ENVOI DU COMPTE PROPRE A L'AVATAR *
*/
const tagueCompte = async(ficheCompte, newMsg, groupe) => {
    // R√©cup√©ration de la discussion de groupe SNG
    const BoutiqueNinja = await newMsg.getChat()

    // Variable de test de pr√©sence du membre utilisateur de l'avatar'
    let trouve = false

    // Recherche du contact de l'utiisateur de la fiche
    for(let participant of BoutiqueNinja.participants)
    {
        // Stockage du contact
        const contact = await bot.getContactById(participant.id._serialized);
        
        // V√©rification des coordonn√©es
        if (contact.number == ficheCompte.num)
        {
            // Mise √† disposition de la fiche tagu√©e
            await BoutiqueNinja.sendMessage(ficheCompte.dataCompte, {
                mentions: [contact]
            })
            // Mention de pr√©sence du membre
            trouve = true
        }
    }

    // Compte en absence du membre
    if (!trouve)
    {
        // Mise √† disposition de la compte non tagu√©
        sendMessage(groupe, ficheCompte.dataCompte)
    }
}

/*
    * ENVOI DE LA FICHE PERSO SHINOBI *
*/
const taguePersoClassement = async(fichePersoClassement, newMsg, groupe) => {
    // R√©cup√©ration de la discussion de groupe SNG
    const GroupeClassement = await newMsg.getChat()

    // Variable de test de pr√©sence du perso
    let trouve = false

    // Recherche du contact de l'utiisateur de la fiche
    for(let participant of GroupeClassement.participants)
    {
        // Stockage du contact
        const contact = await bot.getContactById(participant.id._serialized);
        
        // V√©rification des coordonn√©es
        if (contact.number == fichePersoClassement.num)
        {
            // Mise √† disposition de la fiche tagu√©e
            await GroupeClassement.sendMessage(fichePersoClassement.fiche, {
                mentions: [contact]
            })
            // Mention de pr√©sence du membre
            trouve = true
        }
    }

    // Fiche en absence du membre
    if (!trouve)
    {
        // Mise √† disposition de la fiche non tagu√©e
        sendMessage(groupe, fichePersoClassement.fiche)
    }
}

/*
    * RECUPERATION DES CLANS *
*/
const listClan = () => {
    // Cr√©ation des variables de stockage
    let miniFiche = '‚îÅ‚îÅ ùô≤ùôªùô∞ùôΩùöÇ ùô≥ùô¥ ùôªùô∞ ùô≤ùôæùôºùôºùöÑùôΩùô∞ùöÑùöÉùô¥ ‚îÅ‚îÅ \n\n'
    let clans = []
    let trouve = false
    // R√©cup√©ration des clans
    dataPerso.forEach(perso => {
        // V√©rification suivant les perso valides
        if (perso.actif)
        {
            if (clans.length == 0)
            {
                // Cr√©ation du premier objet clan
                clans.push({
                    nameClan: perso.clan,
                    membres: [perso.name]
                })
            }else if (clans.length > 0)
            {
                // Indentation des clans et membres
                clans.forEach(clan => {
                    if (clan.nameClan == perso.clan)
                    {
                        // Ajout d'un autre membre
                        clan.membres.push(perso.name)
                        trouve = true
                    }
                })

                // Ajout d'un nouveau clan
                if (!trouve)
                {
                    // Cr√©ation du clan suivant
                    clans.push({
                        nameClan: perso.clan,
                        membres: [perso.name]
                    })
                }
            }
        }
        // v√©rification de la variable "trouve"
        if (trouve)
        {
            trouve = false
        }
    })

    // V√©rification
    clans.forEach(clan => {
        miniFiche += '‚≠ïÔ∏è \`\`\`CLAN\`\`\` : *' + clan.nameClan + '*\n'
        // R√©cup√©ration des membres du groupe
        clan.membres.forEach(membre => {
            miniFiche += '‚ñ™Ô∏è' + membre + '\n'
        })
        // Fin de liste des membres du clan
        miniFiche += '\n'
    })

    // Notification du bot
    miniFiche += '\nü•∑üèΩ Merci d\'avoir fait appel √† moi'

    // Retour de la liste des clans
    return miniFiche
}

/*
    * RECUPERATION DES VILLAGES *
*/
const listVillage = () => {
    // Cr√©ation des variables de stockage
    let miniFiche = '‚îÅ‚îÅ *ùöÖùô∏ùôªùôªùô∞ùô∂ùô¥ùöÇ ùô≥ùô¥ ùôªùô∞ ùô≤ùôæùôºùôºùöÑùôΩùô∞ùöÑùöÉùô¥* ‚îÅ‚îÅ \n\n'
    let villages = []
    let trouve = false
    // R√©cup√©ration des villages
    dataPerso.forEach(perso => {
        // V√©rification suivant les perso valides
        if (perso.actif)
        {
            if (villages.length == 0)
            {
                // Cr√©ation du premier objet village
                if (perso.clan != 'Inconnu')
                {
                    // Ajout d'un autre membre avec clan
                    villages.push({
                        nameVillage: perso.village,
                        membres: [perso.clan + ' ' + perso.name]
                    })
                } else
                {
                    // Ajout d'un autre membre sans clan
                    villages.push({
                        nameVillage: perso.village,
                        membres: [perso.name]
                    })
                }
            }else if ((villages.length > 0))
            {
                // Indentation des villages et membres
                villages.forEach(village => {
                    if (village.nameVillage == perso.village)
                    {
                        if (perso.clan != 'Inconnu')
                        {
                            // Ajout d'un autre membre avec clan
                            village.membres.push(perso.clan + ' ' + perso.name)
                        } else
                        {
                            // Ajout d'un autre membre sans clan
                            village.membres.push(perso.name)
                        }
                        trouve = true
                    }
                })

                // Ajout d'un nouveau village
                if (!trouve)
                {
                    if (perso.clan != 'Inconnu')
                    {
                        // Cr√©ation de l'objet village suivant
                        villages.push({
                            nameVillage: perso.village,
                            membres: [perso.clan + ' ' + perso.name]
                        })
                    } else
                    {
                        // Cr√©ation de l'objet village suivant
                        villages.push({
                            nameVillage: perso.village,
                            membres: [perso.name]
                        })
                    }
                }
            }
        }
        // v√©rification de la variable "trouve"
        if (trouve)
        {
            trouve = false
        }
    })

    // V√©rification
    villages.forEach(village => {
        miniFiche += '‚≠ïÔ∏è \`\`\`VILLAGE\`\`\` : *' + village.nameVillage + '*\n'
        // R√©cup√©ration des membres du village
        village.membres.forEach(membre => {
            miniFiche += '‚ñ™Ô∏è' + membre + '\n'
        })
        // Fin de liste des membres du village
        miniFiche += '\n'
    })

    // Notification du bot
    miniFiche += '\nü•∑üèΩ Merci d\'avoir fait appel √† moi'

    // Retour de la liste des villages et de leurs ninjas
    return miniFiche
}

/*
    * RECUPERATION DES GRADES *
*/
const listGrade = () => {
    // Cr√©ation des variables de stockage
    let miniFiche = '‚îÅ‚îÅ *ùô∂ùöÅùô∞ùô≥ùô¥ùöÇ ùôΩùô∏ùôΩùôπùô∞ ùöÇùôΩùô∂* ‚îÅ‚îÅ \n\n'
    let grades = []
    let trouve = false
    // R√©cup√©ration des grades
    dataPerso.forEach(perso => {
        // V√©rification suivant les perso valides
        if (perso.actif)
        {
            if (grades.length == 0)
            {
                // Cr√©ation du premier objet grade
                if (perso.clan != 'Inconnu')
                {
                    // Ajout d'un membre avec clan
                    grades.push({
                        nameGrade: perso.grade,
                        membres: [perso.clan + ' ' + perso.name]
                    })
                } else
                {
                    // Ajout d'un membre sans clan
                    grades.push({
                        nameGrade: perso.grade,
                        membres: [perso.name]
                    })
                }
            }else if (grades.length > 0)
            {
                // Indentation des grades et membres
                grades.forEach(grade => {
                    if (grade.nameGrade == perso.grade)
                    {
                        if (perso.clan != 'Inconnu')
                        {
                            // Ajout d'un autre membre avec clan
                            grade.membres.push(perso.clan + ' ' + perso.name)
                        } else
                        {
                            // Ajout d'un autre membre sans clan
                            grade.membres.push(perso.name)
                        }
                        trouve = true
                    }
                })

                // Ajout d'un nouveau grade
                if (!trouve)
                {
                    if (perso.clan != 'Inconnu')
                    {
                        // Cr√©ation de l'objet grade suivant
                        grades.push({
                            nameGrade: perso.grade,
                            membres: [perso.clan + ' ' + perso.name]
                        })
                    } else
                    {
                        // Cr√©ation de l'objet grade suivant
                        grades.push({
                            nameGrade: perso.grade,
                            membres: [perso.name]
                        })
                    }
                }
            }
        }
        // v√©rification de la variable "trouve"
        if (trouve)
        {
            trouve = false
        }
    })

    // V√©rification
    grades.forEach(grade => {
        miniFiche += '‚≠ïÔ∏è \`\`\`GRADE\`\`\` : *' + grade.nameGrade + '*\n'
        // R√©cup√©ration des ninjas de ce grade
        grade.membres.forEach(membre => {
            miniFiche += '‚ñ™Ô∏è' + membre + '\n'
        })
        // Fin de liste des membres de ce grade
        miniFiche += '\n'
    })

    // Notification du bot
    miniFiche += '\nü•∑üèΩ Merci d\'avoir fait appel √† moi'

    // Retour de la liste des grades et des ninja class√©s
    return miniFiche
}

/*
    * RECUPERATION DES STATUTS *
*/
const listStatut = () => {
    // Cr√©ation des variables de stockage
    let miniFiche = '‚îÅ‚îÅ *ùöÇùöÉùô∞ùöÉùöÑùöÉùöÇ ùôøùô∞ùöÅùöÉùô∏ùô≤ùöÑùôªùô∏ùô¥ùöÅùöÇ ùöÇùôΩùô∂* ‚îÅ‚îÅ \n\n'
    let statuts = []
    let trouve = false
    // R√©cup√©ration des statuts
    dataPerso.forEach(perso => {
        // V√©rification suivant les perso valides
        if (perso.actif)
        {
            if (statuts.length == 0)
            {
                // Cr√©ation du premier objet statut
                if (perso.clan != 'Inconnu')
                {
                    // Ajout d'un autre membre avec clan
                    statuts.push({
                        nameStatut: perso.statut,
                        membres: [perso.clan + ' ' + perso.name]
                    })
                } else
                {
                    // Ajout d'un autre membre sans clan
                    statuts.push({
                        nameStatut: perso.statut,
                        membres: [perso.name]
                    })
                }
            }else if ((statuts.length > 0))
            {
                // Indentation des statuts et membres
                statuts.forEach(statut => {
                    if (statut.nameStatut == perso.statut)
                    {
                        // Ajout d'un autre membre
                        if (perso.clan != 'Inconnu')
                        {
                            // Ajout d'un autre membre avec clan
                            statut.membres.push(perso.clan + ' ' + perso.name)
                        } else
                        {
                            // Ajout d'un autre membre sans clan
                            statut.membres.push(perso.name)
                        }
                        trouve = true
                    }
                })

                // Ajout d'un nouveau statut
                if (!trouve)
                {
                    if (perso.clan != 'Inconnu')
                    {
                        // Cr√©ation de l'objet du statut suivant
                        statuts.push({
                            nameStatut: perso.statut,
                            membres: [perso.clan + ' ' + perso.name]
                        })
                    } else
                    {
                        // Cr√©ation de l'objet du statut suivant
                        statuts.push({
                            nameStatut: perso.statut,
                            membres: [perso.name]
                        })
                    }
                    trouve = false
                }
            }
        }
    })

    // V√©rification
    statuts.forEach(statut => {
        miniFiche += '‚≠ïÔ∏è *' + statut.nameStatut + '*\n' 
        // R√©cup√©ration des ninjas ayant ce statut
        statut.membres.forEach(membre => {
            miniFiche += '‚ñ™Ô∏è' + membre + '\n'
        })
        // Fin de liste des membres ayant ce statut
        miniFiche += '\n'
    })

    // Notification du bot
    miniFiche += '\nü•∑üèΩ Merci d\'avoir fait appel √† moi'

    // Retour de la liste des statuts des ninjas
    return miniFiche
}

/*
    * RECUPERATION DES AGES DE MEMBRES *
*/
const listAge = () => {
    // Cr√©ation des variables de stockage
    let miniFiche = '‚îÅ‚îÅ *ùô∞ùô∂ùô¥ùöÇ ùô≥ùô¥ùöÇ ùôΩùô∏ùôΩùôπùô∞ùöÇ ùöÇùôΩùô∂* ‚îÅ‚îÅ \n\n'
    let ages = []
    let trouve = false
    // R√©cup√©ration des √¢ges
    dataPerso.forEach(perso => {
        // V√©rification suivant les perso valides
        if (perso.actif)
        {
            if (ages.length == 0)
            {
                // Cr√©ation du premier objet √¢ge
                if (perso.clan != 'Inconnu')
                {
                    // Ajout d'un autre membre avec clan
                    ages.push({
                        numAge: perso.age,
                        membres: [perso.clan + ' ' + perso.name]
                    })
                } else
                {
                    // Ajout d'un autre membre sans clan
                    ages.push({
                        numAge: perso.age,
                        membres: [perso.name]
                    })
                }
                
            }else if (ages.length > 0)
            {
                // Indentation des √¢ges et membres
                ages.forEach(age => {
                    if (age.numAge == perso.age)
                    {
                        if (perso.clan != 'Inconnu')
                        {
                            // Ajout d'un autre membre avec clan
                            age.membres.push(perso.clan + ' ' + perso.name)
                        } else
                        {
                            // Ajout d'un autre membre sans clan
                            age.membres.push(perso.name)
                        }
                        trouve = true
                    }
                })
                // Ajout d'une nouvelle cat√©gorie d'√¢ge
                if (!trouve)
                {
                    if (perso.clan != 'Inconnu')
                    {
                        // Cr√©ation de l'objet d'√¢ge suivant
                        ages.push({
                            numAge: perso.age,
                            membres: [perso.clan + ' ' + perso.name]
                        })
                    } else
                    {
                        // Cr√©ation de l'objet d'√¢ge suivant
                        ages.push({
                            numAge: perso.age,
                            membres: [perso.name]
                        })
                    }
                }
            }
        }
        // v√©rification de la variable "trouve"
        if (trouve)
        {
            trouve = false
        }
    })

    // V√©rification
    ages.forEach(age => {
        miniFiche += '‚≠ïÔ∏è \`\`\`Ninjas de\`\`\` : *' + age.numAge + 'ans*\n'
        // R√©cup√©ration des ninjas de cet √¢ge
        age.membres.forEach(membre => {
            miniFiche += '‚ñ™Ô∏è' + membre + '\n'
        })
        // Fin de liste des membres class√© par √¢ge
        miniFiche += '\n'
    })

    // Notification du bot
    miniFiche += '\nü•∑üèΩ Merci d\'avoir fait appel √† moi'

    // Retour de la liste des ninjas class√©s par √¢ge
    return miniFiche
}

/*
    * RECUPERATION DES PERSO PRINCIPAUX, SECONDAIRES ET LIBRES *
*/
const listPersoPSL = (type) => {
    // Variables de stockage
    let liste = ''
    let listPerso = []
    // Tri
    dataPerso.forEach(perso => {
        // V√©rification
        if (perso.type == type && perso.actif)
        {
            if (perso.clan == 'Inconnu')
            {
                // R√©cup√©ration de perso sans clan
                listPerso.push(perso.name)
            } else
            {
                // R√©cup√©ration du perso de clan
                listPerso.push(perso.clan + ' ' + perso.name)
            }
        }
    })

    // Crit√®res
    if (type == 'P')
    {
        // Titre
        liste += '‚ô®Ô∏è *LISTE PERSO PRINCIPAUX* ‚ô®Ô∏è\n\n'
    } else if (type == 'S')
    {
        // Titre
        liste += '‚ô®Ô∏è *LISTE PERSO SECONDAIRES* ‚ô®Ô∏è\n\n'
    } else if (type == 'L')
    {
        // Titre
        liste += '‚ô®Ô∏è *LISTE PERSO LIBRES* ‚ô®Ô∏è\n\n'
    }

    // Traitement de la liste
    listPerso.forEach(perso => {
        // Liste
        liste += '‚ñ´Ô∏è' + perso + '\n'
    })

    // R√©cup√©ration de la liste
    if ((liste != '‚ô®Ô∏è *LISTE PERSO PRINCIPAUX* ‚ô®Ô∏è\n\n') && (liste != '‚ô®Ô∏è *LISTE PERSO SECONDAIRES* ‚ô®Ô∏è\n\n') && (liste != '‚ô®Ô∏è *LISTE PERSO LIBRES* ‚ô®Ô∏è\n\n'))
    {
        // Notification du bot
        liste += '\nü•∑üèΩ Merci d\'avoir fait appel √† moi'
        // Retour des r√©sultats
        return liste
    } else
    {
        return 'ü•∑üèΩ Aucun perso de ce type disponible'
    }
}

const selectFichePerso2 = (namePerso) => {
    // Cr√©ation de la variable de stockage de la fiche
    let fiche = ''

    dataPerso.forEach(perso => {
        if ((perso.name == namePerso) || (perso.name.toLowerCase() == namePerso))
        {
            /* PARTIE 1 - DEBUT */
            fiche = '‚ñÉ‚ñÖ‚ñÜ‚ñà *FICHE PERSO N¬∞ SNG' + perso.id + '* ‚ñà‚ñÜ‚ñÖ‚ñÉ\n\n'
            fiche += '*Clan* : ' + perso.clan + '\n'
            fiche += '*Nom d\'avatar* : ' + perso.name + '\n'
            fiche += '*Pays d\'origine* : ' + perso.pays + '\n'
            fiche += '*Village actuel* : ' + perso.village + '\n'
            fiche += '*Lien(s) de parent√©* : ' + perso.parente + '\n\n'
            fiche += '*√Çge* : ' + perso.age + 'ans\n'
            fiche += '*Taille* : ' + perso.taille + '\n'
            fiche += '*Grade* : ' + perso.grade + '\n'
            fiche += '*User* : ' + perso.user + '\n\n'
            fiche += '*D.N. Perso* : ' + perso.dnPerso + '\n'
            fiche += '*D.N. Membre* : ' + perso.dnMembre + '\n\n'
    
            // Affichage des affinit√©s
            fiche += '*Affinit√©(s)* : '
            perso.affinite.forEach(element => {
                fiche += element + ' '
            })
            // Affichage des capacit√©s h√©r√©ditaires
            fiche += '\n*Cap. H√©r√©ditaire(s)* : '
            perso.capHereditaire.forEach(capacite => {
                fiche += capacite + ' '
            })
    
            /* PARTIE 2 - AJUSTEMENT */
            fiche += '\n*Cap. / Comp. sp√©ciale* : ' + perso.capCompSpeciale + '\n'
            fiche += '*Statut particulier* : ' + perso.statut + '\n\n'
            fiche += '„Éª„Éª„Éª„Éª„Éª„Éª ·é´·ÇÆÕ≤’è·ÇÆ„Äê' + (perso.jutsu[0].listJutsu.length + perso.jutsu[1].listJutsu.length + perso.jutsu[2].listJutsu.length)  +'„Äë„Éª„Éª„Éª„Éª„Éª„Éª\n'
    
            // Liste des jutsus de l'avatar, tri√©es par rang
            perso.jutsu.forEach(niveau => {
                // Liste des jutsu par rang
                fiche += '*' + niveau.titre + '*\n'
                // Liste des techniques
                niveau.listJutsu.forEach(technique => {
                    fiche += '‚ñ™Ô∏è' + technique + '\n'
                })
            })
    
            /* PARTIE 3 - AJUSTEMENT */
            fiche += '„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª\n\n'
            fiche += '*CÃ¨OÃ¨MÃ¨PÃ¨√âÃ¨TÃ¨EÃ¨NÃ¨CÃ¨EÃ¨SÃ¨ NÃ¨IÃ¨NÃ¨JÃ¨AÃ¨* ‚óè  ' + perso.chakra + ' üÖ§üÖ£ ‚óè\n'
            fiche += '‚ñ´Ô∏èAgilit√© :                            : *' + perso.competences.agilite + '/100*\n'
            fiche += '‚ñ´Ô∏èVitesse                            : *' + perso.competences.vitesse + '/100*\n'
            fiche += '‚ñ´Ô∏èPr√©cision                         : *' + perso.competences.precision + '/100*\n'
            fiche += '‚ñ´Ô∏èEndurance                       : *' + perso.competences.endurance + '/' + perso.competences.limiteClan + '*\n'
            fiche += '‚ñ´Ô∏èForce brute                      : *' + perso.competences.force + '/100*\n'
            fiche += '‚ñ´Ô∏èCapacit√©s sensorielles  : *' + perso.competences.senso + '/100*\n'
            fiche += '‚ñ´Ô∏è√âtreinte Psychique         : *' + perso.competences.etreinte + '*\n\n'
            fiche += '*·é¨ÃÅœò·ÇÆ·èÜ·è¢·é¨·é∑·é¨ŒùÕ≤’è Œù·èÜŒù·é´·é™*\n'
    
            // Affichage des √©quipements
            perso.equipements.forEach(equipement => {
                if (equipement.rouleau)
                {
                    // Ligne de l'√©quipement
                    fiche += '‚ñ™Ô∏è' + equipement.libelle + ' : ' + equipement.quantite + '\n'
    
                    // Sous-√©quipements du rouleau
                    if (equipement.sousEquiements.length > 0)
                    {
                        equipement.sousEquiements.forEach(sousEquipement => {
                            // Ligne d'un sous-√©quipement
                            fiche += '‚ñ´Ô∏è' + sousEquipement.libelle + ' : ' + sousEquipement.quantite + '\n'
                        })
                    }
                } else
                {
                    // Ligne d'un √©quipement
                    fiche += '‚ñ™Ô∏è' + equipement.libelle + ' : ' + equipement.quantite + '\n'
                }
            })
    
            /* PARTIE 3 - AJUSTEMENT */
            fiche += '\n*·é¨ÃÅœò·ÇÆ·èÜ·è¢·é¨·é∑·é¨ŒùÕ≤ ·è¢·é°·èÜŒù·èü·èÜ·è¢·é™·èû* : ' + perso.armePrincipale + '\n\n'
            fiche += '‚ïö¬ª‚òÖ *$‚ÇÆ‚Ç≥‚ÇÆ…Ñ‚ÇÆ ‚≤ò∆ó$$∆ó√ò‚Ç¶$* ‚òÖ¬´‚ïù\n'
            fiche += '‚ñ™Ô∏èRang D : ' + perso.missions[0].reussi + ' r√©ussie(s) sur ' + perso.missions[0].total + '\n'
            fiche += '‚ñ™Ô∏èRang C : ' + perso.missions[1].reussi + ' r√©ussie(s) sur ' + perso.missions[1].total + '\n'
            fiche += '‚ñ™Ô∏èRang B : ' + perso.missions[2].reussi + ' r√©ussie(s) sur ' + perso.missions[2].total + '\n'
            fiche += '‚ñ™Ô∏èRang A : ' + perso.missions[3].reussi + ' r√©ussie(s) sur ' + perso.missions[3].total + '\n'
            fiche += '‚ñ™Ô∏èRang S : ' + perso.missions[4].reussi + ' r√©ussie(s) sur ' + perso.missions[4].total + '\n\n'
            fiche += '‚ñë‚ñí‚ñì‚ñà *EXP√âRIENCE NINJA* ‚ñà‚ñì‚ñí‚ñë\n'
    
            // Affichage des exp√©riences ninja
            perso.experience.forEach(xp => {
                // Ligne d'exp√©rience
                fiche += '‚ñ™' + xp.date + ' : ' + xp.description + '\n'
            })
        }
    })

    // V√©rification de la pr√©sence des donn√©es de la fiche
    if (fiche != '')
    {
        // Envoie de la fiche perso
        return fiche
    } else
    {
        // Notification d'absence de donn√©es de fiches
        return 'ü•∑üèΩ Hum... Donn√©es indisponibles'
    }
}

/*
    * RECUPERATION DES MEMBRES INSCRITS AU CLASSEMENT SHONOBI *
*/
const listPersoClassement = (newMsg) => {
    // Variables de stockage
    let liste = ''
    let listPerso = {
        dataCompte: '',
        listeNum: []
    }
    let avatarClassement = []
    // Tri
    dataPersoClassement.forEach(perso => {
        // R√©cup√©ration des num√©ro de membre
        listPerso.listeNum.push(perso.user)
        // Stockage des avatars
        let avatars = []
        // Ajout des avatar du membre
        perso.perso.forEach(avatar => {
            if (avatar.clan != 'Inconnu')
            {
                // Ajout d'avatar avec clan
                avatars.push(avatar.clan + ' ' + avatar.nom)
            } else
            {
                // Ajout d'avatar sans clan
                avatars.push(avatar.nom)
            }
        })
        // Mise √† disposition
        avatarClassement.push(avatars)
    })

    // Titre
    liste += '‚ô®Ô∏è *MEMBRES CLASSEMENT SHINOBI* ‚ô®Ô∏è\n\n'

    // Traitement de la liste
    // listPerso.listeNum.forEach(perso => {
    //     // Liste
    //     liste += '‚ñ´Ô∏è [ @' + perso + ' ]\n'
    // })

    for (let index = 0; index <  listPerso.listeNum.length; index++)
    {
        // R√©cup√©ration du num√©ro
        const perso =  listPerso.listeNum[index]
        // Ajout du tag du membre
        liste += '‚ñ´Ô∏è [ @' + perso + ' ]\n'
        // Affichage des avatar du membre
        avatarClassement[index].forEach(avatar => {
            liste += '~ _' + avatar + '_\n'
        })
        liste += '\n'
    }

    // R√©cup√©ration de la liste
    if (liste != '‚ô®Ô∏è *MEMBRES CLASSEMENT SHINOBI* ‚ô®Ô∏è\n\n')
    {
        // Notification du bot
        liste += '\nü•∑üèΩ \`\`\`Bon jeu √† vous !\`\`\`'
        listPerso.dataCompte = liste
        // Retour des r√©sultats
        tagueAllCompte(listPerso, newMsg)

    } else
    {
        return 'ü•∑üèΩ Aucun membre du classement disponible'
    }
}

/*
    * RECUPERATION D'UNE FICHE PERSO *
*/
const selectFichePerso = (namePerso, newMsg, groupe) => {
    // Cr√©ation des variables de stockage de la fiche
    let fiche = ''
    let ficheData = {
        dataFiche: '',
        number: ''
    }

    dataPerso.forEach(perso => {
        if ((perso.name == namePerso) || (perso.name.toLowerCase() == namePerso))
        {
            /* PARTIE 1 - DEBUT */
            fiche = '‚ñÉ‚ñÖ‚ñÜ‚ñà *FICHE PERSO N¬∞ SNG' + perso.id + '* ‚ñà‚ñÜ‚ñÖ‚ñÉ\n\n'
            fiche += '*Clan* : ' + perso.clan + '\n'
            fiche += '*Nom d\'avatar* : ' + perso.name + '\n'
            fiche += '*Pays d\'origine* : ' + perso.pays + '\n'
            fiche += '*Village actuel* : ' + perso.village + '\n'
            fiche += '*Lien(s) de parent√©* : ' + perso.parente + '\n\n'
            fiche += '*√Çge* : ' + perso.age + 'ans\n'
            fiche += '*Taille* : ' + perso.taille + ' m\n'
            fiche += '*Grade* : ' + perso.grade + '\n'
            fiche += '*User* : ' + '@' + perso.user + '\n\n'
            fiche += '*D.N. Perso* : ' + perso.dnPerso + '\n'
            fiche += '*D.N. Membre* : ' + perso.dnMembre + '\n\n'
    
            // Affichage des affinit√©s
            fiche += '*Affinit√©(s)* :'
            perso.affinite.forEach(element => {
                fiche += ' +' + element
            })
            // Affichage des capacit√©s h√©r√©ditaires
            fiche += '\n*Cap. H√©r√©ditaire(s)* :'
            perso.capHereditaire.forEach(capacite => {
                fiche += ' +' + capacite
            })
    
            /* PARTIE 2 - AJUSTEMENT */
            fiche += '\n*Cap. / Comp. sp√©ciale* : ' + perso.capCompSpeciale + '\n'
            fiche += '*Statut particulier* : ' + perso.statut + '\n\n'
            fiche += '„Éª„Éª„Éª„Éª„Éª„Éª ·é´·ÇÆÕ≤’è·ÇÆ„Äê' + (perso.jutsu[0].listJutsu.length + perso.jutsu[1].listJutsu.length + perso.jutsu[2].listJutsu.length)  +'„Äë„Éª„Éª„Éª„Éª„Éª„Éª\n'
    
            // Liste des jutsus de l'avatar, tri√©es par rang
            perso.jutsu.forEach(niveau => {
                // Liste des jutsu par rang
                fiche += '*' + niveau.titre + '*\n'
                // Liste des techniques
                niveau.listJutsu.forEach(technique => {
                    fiche += '‚ñ™Ô∏è' + technique + '\n'
                })
            })
    
            /* PARTIE 3 - AJUSTEMENT */
            fiche += '„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª„Éª\n\n'
            fiche += '*CÃ¨OÃ¨MÃ¨PÃ¨√âÃ¨TÃ¨EÃ¨NÃ¨CÃ¨EÃ¨SÃ¨ NÃ¨IÃ¨NÃ¨JÃ¨AÃ¨* ‚óè  ' + perso.chakra + ' üÖ§üÖ£ ‚óè\n'
            fiche += '‚ñ´Ô∏èAgilit√©                             : *' + perso.competences.agilite + '/250*\n'
            fiche += '‚ñ´Ô∏èVitesse                            : *' + perso.competences.vitesse + '/250*\n'
            fiche += '‚ñ´Ô∏èPr√©cision                         : *' + perso.competences.precision + '/100*\n'
            fiche += '‚ñ´Ô∏èEndurance                       : *' + perso.competences.endurance + '/' + perso.competences.limiteClan + '*\n'
            fiche += '‚ñ´Ô∏èForce brute                      : *' + perso.competences.force + '/250*\n'
            fiche += '‚ñ´Ô∏èCapacit√©s sensorielles  : *' + perso.competences.senso + '/250*\n'
            fiche += '‚ñ´Ô∏è√âtreinte Psychique         : *' + perso.competences.etreinte + '*\n\n'
            fiche += '*·é¨ÃÅœò·ÇÆ·èÜ·è¢·é¨·é∑·é¨ŒùÕ≤’è Œù·èÜŒù·é´·é™*\n'
    
            // Affichage des √©quipements
            perso.equipements.forEach(equipement => {
                if (equipement.rouleau)
                {
                    // Ligne de l'√©quipement
                    fiche += '‚ñ™Ô∏è' + equipement.libelle + ' : ' + equipement.quantite + '\n'
    
                    // Sous-√©quipements du rouleau
                    if (equipement.sousEquiements.length > 0)
                    {
                        equipement.sousEquiements.forEach(sousEquipement => {
                            // Ligne d'un sous-√©quipement
                            fiche += '‚ñ´Ô∏è' + sousEquipement.libelle + ' : ' + sousEquipement.quantite + '\n'
                        })
                    }
                } else
                {
                    // Ligne d'un √©quipement
                    fiche += '‚ñ™Ô∏è' + equipement.libelle + ' : ' + equipement.quantite + '\n'
                }
            })
    
            /* PARTIE 3 - AJUSTEMENT */
            fiche += '\n*·é¨ÃÅœò·ÇÆ·èÜ·è¢·é¨·é∑·é¨ŒùÕ≤ ·è¢·é°·èÜŒù·èü·èÜ·è¢·é™·èû* : ' + perso.armePrincipale + '\n\n'
            fiche += '‚ïö¬ª‚òÖ *$‚ÇÆ‚Ç≥‚ÇÆ…Ñ‚ÇÆ ‚≤ò∆ó$$∆ó√ò‚Ç¶$* ‚òÖ¬´‚ïù\n'
            fiche += '‚ñ™Ô∏èRang D : ' + perso.missions[0].reussi + ' r√©ussie(s) sur ' + perso.missions[0].total + '\n'
            fiche += '‚ñ™Ô∏èRang C : ' + perso.missions[1].reussi + ' r√©ussie(s) sur ' + perso.missions[1].total + '\n'
            fiche += '‚ñ™Ô∏èRang B : ' + perso.missions[2].reussi + ' r√©ussie(s) sur ' + perso.missions[2].total + '\n'
            fiche += '‚ñ™Ô∏èRang A : ' + perso.missions[3].reussi + ' r√©ussie(s) sur ' + perso.missions[3].total + '\n'
            fiche += '‚ñ™Ô∏èRang S : ' + perso.missions[4].reussi + ' r√©ussie(s) sur ' + perso.missions[4].total + '\n\n'
            fiche += '‚ñë‚ñí‚ñì‚ñà *EXP√âRIENCE NINJA* ‚ñà‚ñì‚ñí‚ñë\n'
    
            // Affichage des exp√©riences ninja
            perso.experience.forEach(xp => {
                // Ligne d'exp√©rience
                fiche += '‚ñ™' + xp.date + ' : ' + xp.description + '\n'
            })

            // Enregistrement dans l'objet
            ficheData.dataFiche = fiche
            ficheData.number = perso.user
        }
    })

    // V√©rification de la pr√©sence des donn√©es de la fiche
    if (fiche != '')
    {
        // Envoie des donn√©es de la fiche perso
        tagueFiche(ficheData, newMsg, groupe)
    } else
    {
        // Notification d'absence de la fiche
        sendMessage(groupe, 'ü•∑üèΩ Hum... Donn√©es indisponibles')
    }
}

/*
    * CREATION D'UNE FICHE AVATAR *
*/
const newPersoSNG = (newMsg) => {
    // Cr√©ation de l'objet du nouvel utilisateur
    let newPerso = {
        actif: true,
        type: "",
        id: 0,
        clan: "",
        name: "",
        pays: "",
        village: "",
        parente: "",
        age: 12,
        taille: 0,
        grade: "Genin",
        user: "",
        dnPerso: "",
        dnMembre: "",
        affinite: [],
        capHereditaire: ["Aucune"],
        capCompSpeciale: "Aucune",
        statut: "Aucun",
        jutsu: [
            {
                titre: "Rang E, D et C",
                listJutsu: []
            },
            {
                titre: "Rang B et A",
                listJutsu: [" ~Aucune~"]
            },
            {
                titre: "Rang S et autres",
                listJutsu: [" ~Aucune~"]
            }
        ],
        competences: {
            agilite: 0,
            vitesse: 0,
            precision: 0,
            endurance: 0,
            force: 0,
            senso: 0,
            etreinte: "Random",
            limiteClan: 100
        },
        chakra: 0,
        equipements: [],
        armePrincipale: "Aucune",
        missions: [
            {
                rang: "D",
                reussi: 0,
                total: 0
            },
            {
                rang: "C",
                reussi: 0,
                total: 0
            },
            {
                rang: "B",
                reussi: 0,
                total: 0
            },
            {
                rang: "A",
                reussi: 0,
                total: 0
            },
            {
                rang: "S",
                reussi: 0,
                total: 0
            }
        ],
        experience: [
            {
                date: new Date().toLocaleDateString(),
                description: 'Cr√©ation du perso et int√©gration dans la communaut√©.'
            }
        ]
    }

    // Trie des donn√©es du nouveau perso
    const detailFiche = newMsg.body.split('\n')

    // R√©cup√©ration du dernier id de la base de donn√©es
    let newId = dataPerso['length'] + 1

    // V√©rification de chaque ligne de la fiche perso
    for (let index = 0; index < detailFiche.length; index++)
    {
        const ligne = detailFiche[index]
        if (ligne.includes('NEW FICHE PERSO'))
        {
            // Initialisation de l'id du nouveau perso
            newPerso.id = newId

        } else if (ligne.includes('Type'))
        {
            // R√©cup√©ration du type d'avatar
            const type = ligne.substr(9).trim().toLowerCase()

            // Ajout du perso selon son type
            switch (type)
            {
                case 'libre':
                    // Ajout du perso libre
                    newPerso.type = 'L'
                    break

                case 'secondaire':
                    // Ajout du perso secondaire
                    newPerso.type = 'S'
                    break
            
                default:
                    // Ajout du perso principal
                    newPerso.type = 'P'
                    break
            }

        } else if (ligne.includes('Clan'))
        {
            // R√©cup√©ration du clan de l'avatar
            newPerso.clan = ligne.substr(9).trim()

        } else if (ligne.includes('Nom d\'avatar'))
        {
            // R√©cup√©ration du nom de l'avatar
            newPerso.name = ligne.substr(17).trim()

        } else if (ligne.includes('Pays d\'origine'))
        {
            // R√©cup√©ration du pays d'origine
            newPerso.pays = ligne.substr(19).trim()

        } else if (ligne.includes('Village actuel'))
        {
            // R√©cup√©ration du village de l'avatar
            newPerso.village = ligne.substr(19).trim()

        } else if (ligne.includes('Lien(s) de parent√©'))
        {
            // Ajout du lien de parent√©
            newPerso.parente = ligne.substr(23).trim()

        } else if (ligne.includes('Taille'))
        {
            // R√©cup√©ration de la taille
            newPerso.taille = parseFloat(ligne.substr(11, 4).trim())

        } else if (ligne.includes('User'))
        {
            // R√©cup√©ration du num√©ro d'utilisateur de l'avatar
            newPerso.user = ligne.substr(10).trim()

        } else if (ligne.includes('D.N. Perso'))
        {
            newPerso.dnPerso = ligne.substr(15).trim()

        } else if (ligne.includes('D.N. Membre'))
        {
            // Ajout de la date d'anniversaire du perso
            newPerso.dnMembre = ligne.substr(16).trim()

        } else if (ligne.includes('Affinit√©(s)'))
        {
            // Ajout de l'affinit√©
            const affinite = ligne.substr(16).trim()
            newPerso.affinite.push(affinite)

        } else if (ligne.includes('Jutsu initial'))
        {
            // Ajout du jutsu
            const jutsu = ligne.substr(18).trim()
            newPerso.jutsu[0].listJutsu.push(jutsu)

        } else if (ligne.includes('>'))
        {
            // R√©cup√©ration des √©quipements
            const unEquipement = ligne.split(' : ')
            const nameEquipement = unEquipement[0].substr(2).trim()
            const nbEquipement = parseInt(unEquipement[1])
            // Ajout de l'√©quipement
            newPerso.equipements.push({
                libelle: nameEquipement,
                quantite: nbEquipement,
                principal: false,
                rouleau: false,
                sousEquiements: []
            })
        }
    }

    // Ajout du perso √† la base de donn√©es
    dataPerso.push(newPerso)

    // Mise √† jour de la fiche perso
    mAjFichePerso()

    // V√©rification de la pr√©sence du compte du membre
    dataPerso.forEach(perso => {
        comptes.forEach(compte => {
            if (perso.clan != 'Inconnu')
            {
                // V√©rification du nom de l'avatar avec clan
                if ((perso.clan + ' ' + perso.name) == compte.avatar)
                {
                    if (perso.id != compte.id)
                    {
                        // Mise √† jour de l'identifiant
                        compte.id = perso.id
                    }
                }
            } else
            {
                // V√©rification du nom de l'avatar sans clan
                if (compte.avatar == newPerso.name)
                {
                    if (perso.id != compte.id)
                    {
                        // Mise √† jour de l'identifiant
                        compte.id = perso.id
                    }
                }
            }
        })
    })

    // Mise √† jour des comptes
    mAjComptePerso()

    // Affichage du perso
    newMsg.reply('ü•∑üèΩ ' + newId + 'e nouvel avatar cr√©√© !')
}

/*
    * RECUPERATION D'UNE FICHE PERSO *
*/
const selectCompte = async(newMsg, groupe) => {
    // Variables de stockage des comptes
    let double = false
    let trouve = false
    let ficheCompte = {
        dataCompte: '',
        num: ''
    }
    let compteNinja = ''

    // R√©cup√©ration du num
    const numPerso = await newMsg.getContact()

    // R√©cup√©ration de tous les comptes disponibles
    comptes.forEach(compte => {
        if (compte.utilisateur == numPerso.number)
        {
            // V√©rification de fiche double
            if (double)
            {
                // Deuxi√®me fiche trouv√©e
                compteNinja += '\n\n\n‚ô®Ô∏è *FICHE DE COMPTE AVATAR* ‚ô®Ô∏è\n\n'
            } else
            {
                // Fiche trouv√©e
                compteNinja += '‚ô®Ô∏è *FICHE DE COMPTE AVATAR* ‚ô®Ô∏è\n\n'
            }
            // Ajout du nom du perso
            compteNinja += '_' + compte.grade + '_ *' + compte.avatar + '*, voici ci-dessous vos donn√©es :\n\n'

            // Donn√©es du perso
            compteNinja += '‚ñ™Ô∏èVous : @' + compte.utilisateur + '\n'
            compteNinja += '‚ñ™Ô∏èBourse ninja : ' + compte.solde + ' M$\n'
            compteNinja += '‚ñ™Ô∏èJob(s) : '

            // Ajout des jobs du membres dans la communaut√©
            if (compte.jobs.length != 0)
            {
                // Saut de ligne
                compteNinja += '\n'
                // Ajout des jobs
                compte.jobs.forEach(job => {
                    compteNinja +=  '   ‚Ä¢' + job + '\n'
                })
            } else 
            {
                // Par d√©faut
                compteNinja += 'Ch√¥meur\n'
            }
            // Saut de ligne
            compteNinja += '\n'

            // Ajout des armes principales de l'avatar
            if (compte.armes.length != 0)
            {
                if (compte.armes.length == 1)
                {
                    // Notification des armes
                    compteNinja += 'Vous avez actuellement *' + compte.armes.length + '* √©quipement principal :\n'
                    // Ajout de l'arme
                    compteNinja += '‚ñ´Ô∏è' + compte.armes[0]
                } else 
                {
                    // Notification des armes
                    compteNinja += 'Vous avez actuellement *' + compte.armes.length + '* √©quipements principaux :'
                    // Ajout des armes
                    compte.armes.forEach(arme => {
                        compteNinja += '\n‚ñ´Ô∏è' + arme
                    })
                }
            } else
            {
                // Notification des armes
                compteNinja += 'Vous n\'avez actuellement aucun √©quipement principal.'
            }

            // Notification de fin de ligne
            compteNinja += '\n\nü•∑üèΩ Merci et √† bient√¥t.'

            // Sauvegarde du num√©ro
            ficheCompte.num = compte.utilisateur

            // Mention des donn√©es de l'avatar trouv√©
            trouve = true

            // Mention d'une premi√®re pr√©sence de fiche
            double = true
        }
    })

    // R√©cup√©ration finale de la fiche
    ficheCompte.dataCompte = compteNinja

    // V√©rification de la pr√©sence des donn√©es de la fiche
    if (trouve)
    {
        // Envoi des donn√©es deu compte
        tagueCompte(ficheCompte, newMsg, groupe)
    } else
    {
        // Notification d'absence des donn√©es
        sendMessage(groupe, 'ü•∑üèΩ Donn√©es indisponibles, veuillez int√©grer la base de donn√©es.')
    }
}

/*
    * CREATION D'UNE TEAM *
*/
const createTeamShinobi = async(newMsg) => {
    // R√©cup√©ration
    if (newMsg.hasQuotedMsg)
    {
        // R√©cup√©ration du message tagu√©
        const message = await newMsg.getQuotedMessage()

        const detailFiche = message.body.split('\n')

        // R√©cup√©ration du nom de la team √† ajouter
        const nameTeam = newMsg.body.split('\n')

        // Cr√©ation de l'objet fiche de team
        let dataTeam = {
            id: dataTeamClassement['length'] + 1,
            rang: 0,
            name: "",
            creation: "",
            cagnotte: 0,
            reputation: {
                BPM: 0,
                BTM: 0
            },
            membres: {
                leader: {
                    id: 0,
                    user: 0
                },
                sousChef: {
                    id: 0,
                    user: 0
                },
                membres: []
            },
            recompenses: [
                {
                    name: "rang S",
                    nb: 0
                },
                {
                    name: "rang A",
                    nb: 0
                },
                {
                    name: "rang B",
                    nb: 0
                },
                {
                    name: "rang C",
                    nb: 0
                },
                {
                    name: "rang D",
                    nb: 0
                },
                {
                    name: "rang E",
                    nb: 0
                },
                {
                    name: "PCN",
                    nb: 0
                }
            ],
            defi: {
                victoireMois: 0,
                defaiteMois: 0,
                nulMois: 0,
                totalVictoire: 0,
                totalDefaite: 0,
                total: 0
            }
        }
        
        if (nameTeam[2] != undefined)
        {
            // Initialisation du nom de la nouvelle Team
            dataTeam.name = nameTeam[2].trim()

            // V√©rification de chaque ligne de la fiche perso
            for (let index = 6; index < detailFiche.length; index++)
            {
                const ligne = detailFiche[index]
                if (ligne.includes('·¥Ñ·¥Ä…¢…¥·¥è·¥õ·¥õ·¥á'))
                {
                    // Initialisation de la cagnotte
                    const cash = ligne.substr(15).split(' M$')
                    dataTeam.cagnotte = parseInt(cash[0])
                } else if (ligne.includes('·¥Ñ Ä·¥áÃÅ·¥áÃÅ·¥á'))
                {
                    // Initialisation de la date de cr√©ation
                    dataTeam.creation = ligne.substr(19).trim()
                } else if (ligne.includes('Chef'))
                {
                    // Chef de team
                    dataTeam.membres.leader.id = 1
                    dataTeam.membres.leader.user = parseInt(ligne.substr(10).trim())
                } else if (ligne.includes('Sous-chef'))
                {
                    // Sous-chef de team
                    dataTeam.membres.sousChef.id = 2
                    dataTeam.membres.sousChef.user = parseInt(ligne.substr(15).trim())
                } else if (ligne.includes('+'))
                {
                    // Ajout des membres de la team
                    dataTeam.membres.membres.push({
                        id: 3,
                        user: parseInt(ligne.substr(3).trim())
                    })
                }
            }

            // Ajout de la team au classement
            dataTeamClassement.push(dataTeam)
            // Mise √† jour des team du classement
            mAjFicheTeamClassement()
            // Notification d'ajout
            newMsg.reply('*Nouvelle team au classement !*')
        }else
        {
            // Notification d'erreur
            newMsg.reply('*Nom de "team" manquant !*')
        }
    }
}

/*
    * CREATION D'UN PERSO SHINOBI *
*/
const createPersoShinobi = (newMsg) => {
    // Cr√©ation de l'objet fiche de perso shinobi
    let dataPersoShinobi = {
        id: dataPersoClassement['length'] + 1,
        team: false,
        nameTeam: '',
        user: 0,
        perso: [],
        reputation: [
            {
                titre: 'BPM',
                nb: 0
            },
            {
                titre: 'Arbitrage',
                nb: 0,
                supervise: 0,
                qualite: []
            },
            {
                gagne: 0,
                perdu: 0,
                total: 0
            }
        ]
    }

    // Variable de v√©rification
    let double = false
    let trouve = false

    // R√©cup√©ration du num√©ro du perso
    const preparationPerso = newMsg.body.split('\n')
    const numPerso = preparationPerso[2].substr(1).trim()

    dataPersoClassement.forEach(perso => {
        if (perso.user == numPerso)
        {
            // V√©rification des perso
            dataPersoClassement.forEach(persoClassement => {
                // Vidange des perso actuels
                persoClassement.perso = []

                // R√©cup√©ration des avatars
                dataPerso.forEach(perso => {
                    if (perso.actif && perso.user == persoClassement.user)
                    {
                        // V√©rification de fiche double
                        if (double)
                        {
                            // Ajout du second perso
                            persoClassement.perso.push({
                                id: perso.id,
                                clan: perso.clan,
                                nom: perso.name
                            })
                        } else
                        {
                            // Ajout du premier perso
                            persoClassement.perso.push({
                                id: perso.id,
                                clan: perso.clan,
                                nom: perso.name
                            })
                        }
                
                        // Mention d'une premi√®re pr√©sence de fiche
                        double = true
                    }
                })
            })

            // Mention
            trouve = true

            // R√©initialisation de la variable
            double = false
        }
    })

    if (!trouve)
    {
        // R√©cup√©ration de tous les comptes disponibles
        dataPerso.forEach(perso => {
            if (perso.user == numPerso)
            {
                // V√©rification de fiche double
                if (double)
                {
                    // Ajout du second perso
                    dataPersoShinobi.perso.push({
                        id: perso.id,
                        clan: perso.clan,
                        nom: perso.name
                    })
                } else
                {
                    // Sauvegarde du num√©ro du perso
                    dataPersoShinobi.user = parseInt(numPerso)
                    console.log(dataPersoShinobi.user)

                    // Ajout du premier perso
                    dataPersoShinobi.perso.push({
                        id: perso.id,
                        clan: perso.clan,
                        nom: perso.name
                    })
                }

                // Mention des donn√©es de l'avatar trouv√©
                trouve = true

                // Mention d'une premi√®re pr√©sence de fiche
                double = true
            }
        })

        // Ajout de la team au classement
        dataPersoClassement.push(dataPersoShinobi)
    }

    // V√©rification de la pr√©sence des donn√©es de la fiche
    if (trouve)
    {
        // Mise √† jour des team du classement
        mAjFichePersoClassement()
        
        // Notification d'enregitrement
        newMsg.reply('ü•∑üèΩ *Mise √† jour des perso du classement !*')
    } else
    {
        // Notification d'absence d'avatar
        newMsg.reply('ü•∑üèΩ Le membre n\'a pas d\'avatar !')
    }
}

/*
    * RECUPERATION D'UNE FICHE DE TEAM *
*/
const selectTeamClassement = (nameTeam, newMsg, groupe) => {
    // Cr√©ation des variables de stockage de la fiche
    let fiche = ''
    let ficheData = {
        dataCompte: '',
        numChef: 0,
        numSousChef: 0,
        listeNum: []
    }

    dataTeamClassement.forEach(team => {
        if ((team.name == nameTeam) || (team.name.toLowerCase() == nameTeam.toLowerCase()))
        {
            // Remplissage de la fiche de team
            fiche = '‚ú¶‚úß *“ì…™·¥Ñ ú·¥á ·¥Ö·¥á ·¥Ñ Ä·¥áÃÅ·¥Ä·¥õ…™·¥è…¥ ·¥Ö·¥á ·¥õ·¥á·¥Ä·¥ç* ‚úß‚ú¶\n\n'
            fiche += '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê ‚ñì‚ñì ‡øá  -  ‡øá ‚ñì‚ñì ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n'
            const nb = parseInt(team.name.length / 2)
            const fin = 25 - nb
            for (let index = 0; index < fin; index++) {
                fiche += ' '
            }
            fiche += team.name + '\n'
            fiche += '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê ‚ñì‚ñì ‡øá  -  ‡øá ‚ñì‚ñì ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n'
            fiche += '·¥Ñ·¥Ä…¢…¥·¥è·¥õ·¥õ·¥á.    : '+ team.cagnotte +' M$\n'
            fiche += '·¥Ñ Ä·¥áÃÅ·¥áÃÅ·¥á  ü·¥á       : ' + team.creation + '\n'
            fiche += ' Ä·¥áÃÅ·¥ò·¥ú·¥õ·¥Ä·¥õ…™·¥è…¥  : ' + team.reputation.BPM + ' üíØ ‚Äî  ' + team.reputation.BTM + ' üåÄ\n\n'
            fiche += 'üá≤¬†üá™¬†üá≤¬†üáß¬†üá∑¬†üá™¬†üá∏¬†\n'
            fiche += '+ Chef : @' + team.membres.leader.user + '\n'
            fiche += '+ Sous-chef : @' + team.membres.sousChef.user + '\n'
            ficheData.listeNum.push(team.membres.leader.user)
            ficheData.listeNum.push(team.membres.sousChef.user)
            team.membres.membres.forEach(membre => {
                fiche += '+ @' + membre.user + '\n'
                ficheData.listeNum.push(membre.user)
            })

            // Enregistrement dans l'objet
            ficheData.dataCompte = fiche
            ficheData.numChef = team.membres.leader.user
            ficheData.numSousChef = team.membres.sousChef.user
        }
    })

    // V√©rification de la pr√©sence des donn√©es de la team
    if (fiche != '')
    {
        // Envoie des donn√©es de la fiche perso
        // sendMessage(groupe, ficheData.dataCompte)
        // tagueFiche(ficheData, newMsg, groupe)
        tagueAllCompte(ficheData, newMsg)
    } else
    {
        // Notification d'absence de la team
        newMsg.reply('ü•∑üèΩ Cette team n\'est pas enregistr√©e')
    }
}

/*
    * RECUPERATION D'UNE FICHE DE PERSO CLASSEMENT *
*/
const selectPersoClassement = async(newMsg, groupe) => {
    // Variables de stockage des comptes
    let trouve = false
    let fichePersoClassement = {
        fiche: '',
        num: ''
    }
    let fichePersoC = ''

    // R√©cup√©ration du num
    const numPerso = await newMsg.getContact()

    // R√©cup√©ration de tous les comptes disponibles
    dataPersoClassement.forEach(perso => {
        if (perso.user == numPerso.number)
        {
            // Fiche trouv√©e
            fichePersoC += '‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Ä¢’è·éª·èÜŒùœ¥·è¥·èÜ ·èü·é™·é°·é†‚Ä¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n\n'
            fichePersoC += 'Moi : @' + perso.user + '\n'
            if (perso.team)
            {
                fichePersoC += 'Statut : Membre de ' + perso.nameTeam + '\n\n'
            } else
            {
                fichePersoC += 'Statut : Mercenaire\n\n'
            }
            fichePersoC += '                ÏõÉ ‚Ä¢ AVATAR(S) ‚Ä¢ ÏõÉ \n'
            perso.perso.forEach(avatar => {
                fichePersoC += '‚óã ' + avatar.clan + ' ' + avatar.nom + '\n'
            })

            fichePersoC += '\nüíØ *·è¢·é™·èû·é∑·é™·é°·é¨ÃÄ’è* üíØ\n'
            fichePersoC += '‚óè ' + perso.reputation[0].nb + ' titre(s) \`\`\`BMP\`\`\`\n'
            fichePersoC += '‚óè ' + perso.reputation[1].nb + ' combats arbitr√©s\n'
            fichePersoC += '‚óè ' + perso.reputation[2].gagne + ' combat(s) gagn√©s sur ' + perso.reputation[2].total + '\n\n'
            fichePersoC += '          ·¥Ä ·¥Ñ·¥è…¥…¥·¥ú  ü·¥Ä ·¥Ö·¥áÃÅ“ì·¥Ä…™·¥õ·¥á ' + perso.reputation[2].perdu + ' “ì·¥è…™s !\n'
            fichePersoC += '‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ'

            // Sauvegarde du num√©ro
            fichePersoClassement.num = perso.user

            // Mention des donn√©es de la fiche trouv√©e
            trouve = true
        }
    })

    // R√©cup√©ration finale de la fiche
    fichePersoClassement.fiche = fichePersoC

    // V√©rification de la pr√©sence des donn√©es de la fiche
    if (trouve)
    {
        // Envoi des donn√©es deu compte
        taguePersoClassement(fichePersoClassement, newMsg, groupe)
    } else
    {
        // Notification d'absence des donn√©es
        newMsg.reply('ü•∑üèΩ Vous ne faites pas partie du classement shinobi !')
    }
}

/*
    * CREATION D'UN COMPTE *
*/
const newCompteSNG = (newMsg) => {
    // Cr√©ation de l'objet du nouvel utilisateur
    let newCompte = {
        id: 0,
        avatar: "",
        utilisateur: 0,
        grade: "",
        solde: 100,
        jobs: [],
        armes: []
    }
    
    // Trie des donn√©es du nouveau perso
    const avatar = newMsg.body.split(' : ')

    // R√©cup√©ration du dernier id de la base de donn√©es
    let newId = comptes[(comptes.length - 1)].id

    // D√©claration de la variable de v√©rification
    let trouve = false

    // R√©cup√©ration du perso
    dataPerso.forEach(perso => {
        if ((perso.name == avatar[1]) || (perso.name.toLowerCase() == avatar[1].toLowerCase()))
        {
            // Initialisation du compte
            newCompte.id = newId
            newCompte.utilisateur = parseInt(perso.user)
            newCompte.grade = perso.grade

            // V√©rification du clan
            if (perso.clan == 'Inconnu')
            {
                // Ajout du compte sans le clan
                newCompte.avatar = perso.name
            } else {
                // Ajout du compte avec le clan
                newCompte.avatar = perso.clan + ' ' + perso.name
            }

            // Notification
            trouve = true
        }
    })

    // V√©rification
    if (trouve)
    {
        // Ajout du nouveau compte √† la base de donn√©es
        comptes.push(newCompte)
        // Mise √† jour des comptes
        mAjComptePerso()
        // Notification finale
        newMsg.reply('ü•∑üèΩ Nouveau Compte Cr√©√© !')
    } else
    {
        // Notification d'absence du compte
        newMsg.reply('ü•∑üèΩ Navr√©, mais cette fiche est indisponibe.')
    }
}


/**
 * ***************************************************************************************
 */

/*
    * MISE A JOUR AVATAR DE LA BASE DONNEES *
*/
const mAjFichePersoPrime = () => {
    // Actualisation de la base de donn√©es
    fs.writeFileSync('./neon/fiches/persoPrime.json', JSON.stringify(persoPrime), 'utf8')
}

/*
    * CREATION D'UN PERSO PRIME *
*/
const createPersoPrime = (newMsg) => {
    // Cr√©ation de l'objet du nouvel avatar
    let newPerso = {
        id: 0,
        pseudo: '',
        fortune: 2000,
        occupation: {
            libelle: '',
            exploration: 'SF'
        },
        grade: 'Soldat',
        void: '',
        rang: {
            titre: 'Rookie',
            logo: 'ü•â',
            categorie: 'üê∞',
            niveau: '1Ô∏è‚É£'
        },
        badge: '',
        portee: 5,
        competences: {
            vitesse: 1,
            senso: 1,
            reflexe: 1
        },
        xp: 0,
        pa: 0,
        badge: '',
        techniques: 0,
        armes: 0,
        boost: 0,
        trophee: 0
    }
    let top = false

    // Trie des donn√©es du nouveau perso
    const detailFiche = newMsg.body.split('\n')

    // R√©cup√©ration du dernier id de la base de donn√©es
    let newId = persoPrime[(persoPrime.length - 1)].id

    // V√©rification de chaque ligne de la fiche perso
    for (let index = 0; index < detailFiche.length; index++)
    {
        const ligne = detailFiche[index]
        if (ligne.includes('build'))
        {
            // Initialisation de l'id du nouveau perso
            newPerso.id = newId + 1
            top = true
            // newPerso.id = 1

        } else if (ligne.includes('Pseudo'))
        {
            // R√©cup√©ration du clan de l'avatar
            newPerso.pseudo = ligne.substr(9).trim()

        } else if (ligne.includes('Vo√Ød'))
        {
            // R√©cup√©ration du nom de l'avatar
            newPerso.void = ligne.substr(7).trim()

        } else if (ligne.includes('Occupation'))
        {
            // R√©cup√©ration du pays d'origine
            newPerso.occupation.libelle = ligne.substr(13).trim()
        }
    }

    if (top)
    {
        // Ajout du perso √† la base de donn√©es
        persoPrime.push(newPerso)

        // Mise √† jour de la fiche perso
        mAjFichePersoPrime()

        // Notification d'enregistrement
        newMsg.reply('ü§ñ Nouvelle card cr√©√©e !')
        // newMsg.reply('ü§ñ nouvelle card cr√©√©e !')
    }
}

/*
    * RECUPERATION D'UNE FICHE PERSO *
*/
const selectFichePersoPrime = (namePerso, newMsg, groupe) => {
    console.log('S√©lection d\'un perso ')
    // Cr√©ation des variables de stockage de la fiche
    let fiche = ''

    persoPrime.forEach(perso => {
        if ((perso.pseudo == namePerso) || (perso.pseudo.toLowerCase() == namePerso))
        {
            /* PARTIE 1 - DEBUT */
            fiche = '‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ\n'
            fiche += '   *·öõ·öú ùó®ùó•ùó£ùóö :ùóòùóπùòÜùòÄùó∂ùòÇùó∫ ùó™ùóºùóøùóπùó±üåÄüéÆ‚∏éüåÖ*//\n\n'
            fiche += ' -------------------------------\n'
            fiche += ' ·öú üé¥ *PLAYER CARDS*üé¥·öõ\n'
            fiche += '-------------------------------\n\n'
            fiche += 'üÜî *PSEUDO*: ' + perso.pseudo + '\n'
            fiche += 'üí∞ *FORTUN‚Ç¨*: ' + perso.fortune + '¬©üß≠\n'
            fiche += '‚ôâ *OCCUPATION*: ' + perso.occupation.libelle + '‚öúÔ∏è/'+ perso.occupation.exploration +'\n'
            fiche += 'üéñÔ∏è *GRADE*: ' + perso.grade + '\n'
            fiche += '--------------\n'
            fiche += 'üåÄ *VO√èD*: ' + perso.void + '\n'
            fiche += 'üéóÔ∏è *RANG*: ' + perso.rang.titre + perso.rang.logo + perso.rang.categorie + perso.rang.niveau + '\n'
            fiche += 'üõ°Ô∏è *BADGE*: ' + perso.badge + '\n'
            fiche += '‚ôâ *PORT√âE*: ' + perso.portee + 'm\n'
            fiche += '----------------\n'
            fiche += '‚ö° *VITESSE*: ' + perso.competences.vitesse + '/10ü•â\n'
            fiche += 'üîä *SENSORIALIT√â*: ' + perso.competences.senso + '/10ü•â\n'
            fiche += 'üí° *REFLEXES*: ' + perso.competences.reflexe + '/10ü•â\n'
            fiche += '----------------\n'
            fiche += '‚è´ *XP*: ' + perso.xp + '/100\n'
            fiche += '‚ú≥Ô∏è *PA*: ' + perso.pa + '\n'
            fiche += '-----------------\n'
            fiche += 'üèÜ *TROPH√âES*: ' + perso.trophee + '\n'
            fiche += 'üé¥ *TECHNIQUES*: ' + perso.techniques + '\n'
            fiche += 'üé¥ *ARMES*: ' + perso.armes + '\n'
            fiche += 'üé¥ *BOOST*: ' + perso.boost
        }
    })

    // V√©rification de la pr√©sence des donn√©es de la fiche
    if (fiche != '')
    {
        // Envoie des donn√©es de la fiche perso
        // tagueFiche(ficheData, newMsg, groupe)
        sendMessage(groupe, fiche)
    } else
    {
        // Notification d'absence de la fiche
        sendMessage(groupe, 'ü§ñ *Perso indisponible*')
    }
}

/*
    * ACTUALISATION DE COMPETENCES *
*/
const actualisationCompetence = (fiche, data, competence) => {
    const donnee = data.split(' : ')
    if (donnee[1].substr(0, 1) == '+')
    {
        console.log('Ajout')
        // R√©cup√©ration de nombre de PCN √† ajouter
        const ajout = parseInt(donnee[1].substr(1))
        // Ajout des PCN
        fiche.competences[competence] += ajout
        return '‚ñ´Ô∏èAjout de ' + ajout + ' point(s) ' + competence +'\n'
    }
    if (donnee[1].substr(0, 1) == '-')
    {
        // R√©cup√©ration de nombre de points √† retirer
        const soustraction = parseInt(donnee[1].substr(1))
        // Soustraction des points
        fiche.competences[competence] -= soustraction
        // Note de l'actualisation
        return '‚ñ´Ô∏èSoustraction de ' + soustraction + ' point(s) ' + competence +'\n'
    }
}

/*
    * ACTUALISATION DE POINTS *
*/
const actualisationPoint = (fiche, data, competence) => {
    const donnee = data.split(' : ')
    if (donnee[1].substr(0, 1) == '+')
    {
        // R√©cup√©ration de nombre de PCN √† ajouter
        const ajout = parseInt(donnee[1].substr(1))
        // Ajout des PCN
        fiche[competence] += ajout
        return '‚ñ´Ô∏èAjout de ' + ajout + ' point(s) ' + competence +'\n'
    }
    if (donnee[1].substr(0, 1) == '-')
    {
        // R√©cup√©ration de nombre de points √† retirer
        const soustraction = parseInt(donnee[1].substr(1))
        // Soustraction des points
        fiche[competence] -= soustraction
        // Note de l'actualisation
        return '‚ñ´Ô∏èSoustraction de ' + soustraction + ' point(s) ' + competence +'\n'
    }
}

/*
    * ACTUALISATION COMPLETE DE LA FICHE PERSO PRIME *
*/
const actualisationFichePrime = (recap, newMsg) => {
    // Tri du r√©capitulatif et r√©partition des requ√™tes
    const requete = recap.split('\n')
    // R√©cup√©ration du nom de l'avatar
    const namePerso = requete[2].substr(0).trim()

    // Variable de v√©rification d'actualisation
    let actualisation = false
    let recapitulatif = '*RECAPITULATIF D\'ACTUALISATION*\n\n'

    // Recherche de la fiche perso
    persoPrime.forEach(perso => {
        if ((perso.pseudo == namePerso) || (perso.pseudo.toLowerCase() == namePerso.toLowerCase()))
        {
            // Actualisation des donn√©es de la fiche
            requete.forEach(ligne => {
                // Actualisation des PCN
                if (ligne.substr(2, 4) == 'comp')
                {
                    switch (ligne.substr(7, 1))
                    {
                        case 'V':
                            // Actualisation des PCN vitesse
                            recapitulatif += actualisationCompetence(perso, ligne, 'vitesse')
                            break
                        case 'R':
                            // Actualisation des PCN endurance
                            recapitulatif += actualisationCompetence(perso, ligne, 'reflexe')
                            break
                        case 'S':
                            // Actualisation des PCN capacit√©s sensorielles
                            recapitulatif += actualisationCompetence(perso, ligne, 'senso')
                            break
                    }
                }
                // Actualisation du pseudo
                if (ligne.substr(2, 6).toLowerCase() == 'pseudo')
                {
                    // Actualisation du pseudo
                    recapitulatif += '‚ñ´Ô∏è' + perso.pseudo
                    perso.pseudo = ligne.substr(11).trim()
                    recapitulatif += ' => _'+ perso.pseudo +'_\n'
                }
                // Actualisation de la fortune
                if (ligne.substr(2, 7).toLowerCase() == 'fortune')
                {
                    // Modification de la fortune
                    recapitulatif += actualisationPoint(perso, ligne, 'fortune')
                }
                // Actualisation du badge
                if (ligne.substr(2, 5).toLowerCase() == 'badge')
                {
                    // Actualisation du badge
                    recapitulatif += '‚ñ´Ô∏è' + perso.badge
                    perso.badge = ligne.substr(10).trim()
                    recapitulatif += ' => _'+ perso.badge +'_\n'
                }
                // Actualisation du void
                if (ligne.substr(2, 4).toLowerCase() == 'void')
                {
                    // Actualisation du void
                    recapitulatif += '‚ñ´Ô∏è' + perso.void
                    perso.void = ligne.substr(9).trim()
                    recapitulatif += ' => _'+ perso.void +'_\n'
                }
                // Actualisation de la port√©e d'attaque
                if (ligne.substr(2, 6).toLowerCase() == 'portee')
                {
                    // Actualisation de la port√©e d'attaque
                    recapitulatif += '‚ñ´Ô∏è' + perso.portee
                    perso.portee = ligne.substr(11).trim()
                    recapitulatif += 'm => _'+ perso.portee +'m_\n'
                }
                // Actualisation du grade
                if (ligne.substr(2, 5).toLowerCase() == 'grade')
                {
                    // Actualisation du grade actuel
                    recapitulatif += '‚ñ´Ô∏è' + perso.grade
                    perso.grade = ligne.substr(10).trim()
                    recapitulatif += ' => _'+ perso.grade +'_\n'
                }
                // Actualisation de points
                if (ligne.substr(2, 3) == 'new')
                {
                    switch (ligne.substr(6, 3))
                    {
                        case 'XPs':
                            // Actualisation des xp
                            recapitulatif += actualisationPoint(perso, ligne, 'xp')
                            break
                        case 'PAs':
                            // Actualisation des points d'actualiation
                            recapitulatif += actualisationPoint(perso, ligne, 'pa')
                            break
                        case 'TRO':
                            // Actualisation des troph√©es
                            recapitulatif += actualisationPoint(perso, ligne, 'trophee')
                            break
                        case 'TEC':
                            // Actualisation des techniques
                            recapitulatif += actualisationPoint(perso, ligne, 'techniques')
                            break
                        case 'ARM':
                            // Actualisation des armes
                            recapitulatif += actualisationPoint(perso, ligne, 'armes')
                            break
                        case 'BOO':
                            // Actualisation des points de boost
                            recapitulatif += actualisationPoint(perso, ligne, 'booste')
                            break
                    }
                }
            })
            // Actualisation effectu√©e
            actualisation = true
        }
    })

    // V√©rification de l'actualisation
    if (actualisation)
    {
        // Actualisation
        mAjFichePersoPrime()
        // Notification de succ√®s d'actualisation
        newMsg.reply(recapitulatif + '\n ```Actualisation effectu√©e !```')
    } else
    {
        // Notification d'absence de la fiche
        newMsg.reply('ü§ñ Fiche non disponible. Veuillez v√©rifier le nom du perso.')
    }
}

/*
    * REDIRECTION SUIVANT LA PRESENCE DE LA VARIABLE DE SESSION *
*/
(fs.existsSync(SESSION_FILE_PATH)) ? withSession() : withOutSession();